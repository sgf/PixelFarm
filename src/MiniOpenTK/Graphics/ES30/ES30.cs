//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.ES30
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new byte[]
            {
                103, 108, 65, 99, 113, 117, 105, 114, 101, 75, 101, 121, 101, 100, 77, 117, 116, 101, 120, 87, 105, 110, 51, 50, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 81, 67, 79, 77, 0,
                103, 108, 65, 112, 112, 108, 121, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 67, 77, 65, 65, 73, 78, 84, 69, 76, 0,
                103, 108, 65, 116, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 66, 101, 103, 105, 110, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 78, 86, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 66, 101, 103, 105, 110, 81, 117, 101, 114, 121, 0,
                103, 108, 66, 101, 103, 105, 110, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 66, 101, 103, 105, 110, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 66, 105, 110, 100, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 66, 97, 115, 101, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 83, 97, 109, 112, 108, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 75, 72, 82, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 78, 86, 0,
                103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111, 114, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 105, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 105, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 105, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 105, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 78, 71, 76, 69, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 78, 86, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 69, 120, 116, 101, 114, 110, 97, 108, 69, 88, 84, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 69, 88, 84, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 67, 108, 101, 97, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 102, 105, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 102, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 117, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 0,
                103, 108, 67, 108, 101, 97, 114, 80, 105, 120, 101, 108, 76, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 117, 105, 69, 88, 84, 0,
                103, 108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0,
                103, 108, 67, 108, 101, 97, 114, 84, 101, 120, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 67, 108, 101, 97, 114, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 108, 105, 112, 67, 111, 110, 116, 114, 111, 108, 69, 88, 84, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 105, 69, 88, 84, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 105, 79, 69, 83, 0,
                103, 108, 67, 111, 109, 112, 105, 108, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 110, 115, 101, 114, 118, 97, 116, 105, 118, 101, 82, 97, 115, 116, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 67, 111, 112, 121, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 111, 112, 121, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 78, 86, 0,
                103, 108, 67, 111, 112, 121, 73, 109, 97, 103, 101, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 73, 109, 97, 103, 101, 83, 117, 98, 68, 97, 116, 97, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 115, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 97, 115, 107, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 84, 97, 98, 108, 101, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 79, 112, 101, 114, 97, 116, 105, 111, 110, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 77, 101, 109, 111, 114, 121, 79, 98, 106, 101, 99, 116, 115, 69, 88, 84, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 118, 69, 88, 84, 0,
                103, 108, 67, 117, 108, 108, 70, 97, 99, 101, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 75, 72, 82, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 77, 101, 109, 111, 114, 121, 79, 98, 106, 101, 99, 116, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 81, 117, 101, 114, 105, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 81, 117, 101, 114, 105, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 101, 109, 97, 112, 104, 111, 114, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 70, 117, 110, 99, 0,
                103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 65, 114, 114, 97, 121, 102, 118, 78, 86, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 65, 114, 114, 97, 121, 102, 118, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 73, 110, 100, 101, 120, 101, 100, 102, 78, 86, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 73, 110, 100, 101, 120, 101, 100, 102, 79, 69, 83, 0,
                103, 108, 68, 101, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 105, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 105, 78, 86, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 105, 79, 69, 83, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 68, 105, 115, 99, 97, 114, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 78, 71, 76, 69, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 78, 71, 76, 69, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 82, 97, 110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 82, 97, 110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 82, 97, 110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 86, 107, 73, 109, 97, 103, 101, 78, 86, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 105, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 105, 78, 86, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 105, 79, 69, 83, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 69, 110, 100, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 78, 86, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 69, 110, 100, 81, 117, 101, 114, 121, 0,
                103, 108, 69, 110, 100, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 69, 110, 100, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 69, 110, 100, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 83, 111, 117, 114, 99, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 83, 104, 97, 100, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 73, 115, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 84, 101, 120, 79, 98, 106, 101, 99, 116, 83, 116, 97, 116, 101, 79, 118, 101, 114, 114, 105, 100, 101, 105, 81, 67, 79, 77, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 70, 108, 117, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 103, 109, 101, 110, 116, 67, 111, 118, 101, 114, 97, 103, 101, 67, 111, 108, 111, 114, 78, 86, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 70, 101, 116, 99, 104, 66, 97, 114, 114, 105, 101, 114, 81, 67, 79, 77, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 70, 111, 118, 101, 97, 116, 105, 111, 110, 67, 111, 110, 102, 105, 103, 81, 67, 79, 77, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 70, 111, 118, 101, 97, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 105, 120, 101, 108, 76, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 83, 105, 122, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 78, 86, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 68, 111, 119, 110, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 68, 111, 119, 110, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 77, 117, 108, 116, 105, 118, 105, 101, 119, 79, 86, 82, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 77, 117, 108, 116, 105, 118, 105, 101, 119, 79, 86, 82, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 79, 69, 83, 0,
                103, 108, 70, 114, 111, 110, 116, 70, 97, 99, 101, 0,
                103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 0,
                103, 108, 71, 101, 110, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 110, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 81, 117, 101, 114, 105, 101, 115, 0,
                103, 108, 71, 101, 110, 81, 117, 101, 114, 105, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 83, 101, 109, 97, 112, 104, 111, 114, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 71, 101, 110, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 116, 114, 105, 98, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 115, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 97, 99, 104, 101, 100, 83, 104, 97, 100, 101, 114, 115, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 84, 97, 98, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 115, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 83, 116, 114, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 0,
                103, 108, 71, 101, 116, 70, 101, 110, 99, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 70, 105, 114, 115, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 105, 95, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 105, 95, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 103, 68, 97, 116, 97, 73, 110, 100, 101, 120, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 105, 120, 101, 108, 76, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 83, 105, 122, 101, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 102, 111, 114, 109, 97, 116, 105, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 102, 111, 114, 109, 97, 116, 83, 97, 109, 112, 108, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 77, 101, 109, 111, 114, 121, 79, 98, 106, 101, 99, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 101, 120, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 68, 97, 115, 104, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 76, 101, 110, 103, 116, 104, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 77, 101, 116, 114, 105, 99, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 77, 101, 116, 114, 105, 99, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 83, 112, 97, 99, 105, 110, 103, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 68, 97, 116, 97, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 68, 97, 116, 97, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 66, 121, 78, 97, 109, 101, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 73, 110, 102, 111, 76, 111, 103, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 76, 111, 99, 97, 116, 105, 111, 110, 73, 110, 100, 101, 120, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 101, 109, 97, 112, 104, 111, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 117, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 80, 114, 101, 99, 105, 115, 105, 111, 110, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 105, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 73, 77, 71, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 72, 97, 110, 100, 108, 101, 73, 77, 71, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 86, 97, 114, 121, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 108, 97, 116, 101, 100, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 65, 78, 71, 76, 69, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 73, 110, 100, 105, 99, 101, 115, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 115, 105, 103, 110, 101, 100, 66, 121, 116, 101, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 85, 110, 115, 105, 103, 110, 101, 100, 66, 121, 116, 101, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 102, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 86, 107, 80, 114, 111, 99, 65, 100, 100, 114, 78, 86, 0,
                103, 108, 72, 105, 110, 116, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 77, 101, 109, 111, 114, 121, 70, 100, 69, 88, 84, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 77, 101, 109, 111, 114, 121, 87, 105, 110, 51, 50, 72, 97, 110, 100, 108, 101, 69, 88, 84, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 77, 101, 109, 111, 114, 121, 87, 105, 110, 51, 50, 78, 97, 109, 101, 69, 88, 84, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 83, 101, 109, 97, 112, 104, 111, 114, 101, 70, 100, 69, 88, 84, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 83, 101, 109, 97, 112, 104, 111, 114, 101, 87, 105, 110, 51, 50, 72, 97, 110, 100, 108, 101, 69, 88, 84, 0,
                103, 108, 73, 109, 112, 111, 114, 116, 83, 101, 109, 97, 112, 104, 111, 114, 101, 87, 105, 110, 51, 50, 78, 97, 109, 101, 69, 88, 84, 0,
                103, 108, 73, 110, 115, 101, 114, 116, 69, 118, 101, 110, 116, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 73, 110, 116, 101, 114, 112, 111, 108, 97, 116, 101, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 83, 117, 98, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 105, 69, 88, 84, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 105, 78, 86, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 105, 79, 69, 83, 0,
                103, 108, 73, 115, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 77, 101, 109, 111, 114, 121, 79, 98, 106, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 73, 115, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 111, 105, 110, 116, 73, 110, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 111, 105, 110, 116, 73, 110, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 73, 115, 81, 117, 101, 114, 121, 0,
                103, 108, 73, 115, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 73, 115, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 83, 97, 109, 112, 108, 101, 114, 0,
                103, 108, 73, 115, 83, 101, 109, 97, 112, 104, 111, 114, 101, 69, 88, 84, 0,
                103, 108, 73, 115, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 76, 97, 98, 101, 108, 79, 98, 106, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 0,
                103, 108, 76, 105, 110, 107, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 70, 114, 117, 115, 116, 117, 109, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 51, 120, 50, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 73, 100, 101, 110, 116, 105, 116, 121, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 51, 120, 50, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 79, 114, 116, 104, 111, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 80, 111, 112, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 80, 117, 115, 104, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 82, 111, 116, 97, 116, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 82, 111, 116, 97, 116, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 83, 99, 97, 108, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 83, 99, 97, 108, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 84, 114, 97, 110, 115, 108, 97, 116, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 84, 114, 97, 110, 115, 108, 97, 116, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 120, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 84, 104, 114, 101, 97, 100, 115, 75, 72, 82, 0,
                103, 108, 77, 101, 109, 111, 114, 121, 79, 98, 106, 101, 99, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 105, 110, 83, 97, 109, 112, 108, 101, 83, 104, 97, 100, 105, 110, 103, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 69, 120, 116, 101, 114, 110, 97, 108, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 78, 86, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 80, 97, 116, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 80, 97, 116, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 79, 69, 83, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 118, 101, 114, 68, 101, 112, 116, 104, 70, 117, 110, 99, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 68, 97, 115, 104, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 70, 111, 103, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 77, 101, 109, 111, 114, 121, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 101, 110, 99, 105, 108, 68, 101, 112, 116, 104, 79, 102, 102, 115, 101, 116, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 114, 105, 110, 103, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 117, 98, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 117, 98, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 117, 115, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 105, 0,
                103, 108, 80, 111, 105, 110, 116, 65, 108, 111, 110, 103, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 77, 111, 100, 101, 78, 86, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 67, 108, 97, 109, 112, 69, 88, 84, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 111, 112, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 80, 114, 105, 109, 105, 116, 105, 118, 101, 66, 111, 117, 110, 100, 105, 110, 103, 66, 111, 120, 69, 88, 84, 0,
                103, 108, 80, 114, 105, 109, 105, 116, 105, 118, 101, 66, 111, 117, 110, 100, 105, 110, 103, 66, 111, 120, 79, 69, 83, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 79, 69, 83, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 116, 104, 70, 114, 97, 103, 109, 101, 110, 116, 73, 110, 112, 117, 116, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 73, 77, 71, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 73, 77, 71, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 117, 115, 104, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 81, 117, 101, 114, 121, 67, 111, 117, 110, 116, 101, 114, 69, 88, 84, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 83, 97, 109, 112, 108, 101, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 78, 86, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 75, 72, 82, 0,
                103, 108, 82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 108, 101, 97, 115, 101, 75, 101, 121, 101, 100, 77, 117, 116, 101, 120, 87, 105, 110, 51, 50, 69, 88, 84, 0,
                103, 108, 82, 101, 108, 101, 97, 115, 101, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 78, 71, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 78, 86, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 68, 101, 112, 116, 104, 86, 97, 108, 117, 101, 115, 78, 86, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 101, 115, 117, 109, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 79, 69, 83, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 79, 69, 83, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 65, 114, 114, 97, 121, 118, 78, 86, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 65, 114, 114, 97, 121, 118, 79, 69, 83, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 78, 86, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 79, 69, 83, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 118, 78, 86, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 118, 79, 69, 83, 0,
                103, 108, 83, 101, 108, 101, 99, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 83, 101, 109, 97, 112, 104, 111, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 117, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 83, 101, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 83, 105, 103, 110, 97, 108, 83, 101, 109, 97, 112, 104, 111, 114, 101, 69, 88, 84, 0,
                103, 108, 83, 105, 103, 110, 97, 108, 86, 107, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 105, 103, 110, 97, 108, 86, 107, 83, 101, 109, 97, 112, 104, 111, 114, 101, 78, 86, 0,
                103, 108, 83, 116, 97, 114, 116, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 117, 98, 112, 105, 120, 101, 108, 80, 114, 101, 99, 105, 115, 105, 111, 110, 66, 105, 97, 115, 78, 86, 0,
                103, 108, 84, 101, 115, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 70, 111, 118, 101, 97, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 77, 101, 109, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 86, 105, 101, 119, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 86, 105, 101, 119, 79, 69, 83, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 86, 97, 114, 121, 105, 110, 103, 115, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 66, 105, 110, 100, 105, 110, 103, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 73, 77, 71, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 73, 77, 71, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 83, 116, 97, 103, 101, 115, 69, 88, 84, 0,
                103, 108, 85, 115, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 65, 78, 71, 76, 69, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 65, 114, 114, 97, 121, 118, 78, 86, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 65, 114, 114, 97, 121, 118, 79, 69, 83, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 78, 86, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 79, 69, 83, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 118, 78, 86, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 118, 79, 69, 83, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 80, 111, 115, 105, 116, 105, 111, 110, 87, 83, 99, 97, 108, 101, 78, 86, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 83, 119, 105, 122, 122, 108, 101, 78, 86, 0,
                103, 108, 87, 97, 105, 116, 83, 101, 109, 97, 112, 104, 111, 114, 101, 69, 88, 84, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 87, 97, 105, 116, 86, 107, 83, 101, 109, 97, 112, 104, 111, 114, 101, 78, 86, 0,
                103, 108, 87, 101, 105, 103, 104, 116, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 87, 105, 110, 100, 111, 119, 82, 101, 99, 116, 97, 110, 103, 108, 101, 115, 69, 88, 84, 0,
            };
            EntryPointNameOffsets = new int[]
            {
                0,
                28,
                47,
                72,
                88,
                104,
                142,
                157,
                184,
                206,
                228,
                241,
                257,
                282,
                303,
                316,
                333,
                351,
                377,
                410,
                428,
                453,
                472,
                486,
                500,
                524,
                542,
                563,
                581,
                598,
                611,
                627,
                646,
                666,
                686,
                710,
                738,
                766,
                778,
                794,
                810,
                830,
                854,
                878,
                898,
                916,
                939,
                959,
                972,
                991,
                1018,
                1040,
                1056,
                1081,
                1089,
                1105,
                1121,
                1137,
                1154,
                1167,
                1181,
                1211,
                1226,
                1245,
                1267,
                1284,
                1306,
                1323,
                1335,
                1351,
                1367,
                1383,
                1406,
                1429,
                1455,
                1481,
                1507,
                1536,
                1569,
                1589,
                1611,
                1633,
                1655,
                1668,
                1685,
                1705,
                1725,
                1748,
                1773,
                1790,
                1813,
                1841,
                1863,
                1890,
                1908,
                1937,
                1957,
                1982,
                2005,
                2021,
                2036,
                2061,
                2087,
                2098,
                2121,
                2147,
                2169,
                2194,
                2215,
                2239,
                2255,
                2272,
                2293,
                2318,
                2334,
                2358,
                2381,
                2397,
                2425,
                2441,
                2460,
                2482,
                2499,
                2521,
                2536,
                2549,
                2567,
                2584,
                2611,
                2632,
                2656,
                2668,
                2680,
                2702,
                2725,
                2739,
                2762,
                2786,
                2801,
                2811,
                2838,
                2852,
                2865,
                2879,
                2906,
                2930,
                2943,
                2965,
                2992,
                3029,
                3054,
                3078,
                3092,
                3109,
                3133,
                3149,
                3164,
                3192,
                3220,
                3244,
                3273,
                3312,
                3361,
                3398,
                3435,
                3462,
                3488,
                3508,
                3541,
                3574,
                3601,
                3637,
                3653,
                3692,
                3721,
                3730,
                3756,
                3769,
                3781,
                3794,
                3820,
                3845,
                3865,
                3885,
                3896,
                3910,
                3926,
                3949,
                3976,
                3996,
                4021,
                4053,
                4074,
                4100,
                4120,
                4152,
                4176,
                4197,
                4222,
                4255,
                4267,
                4284,
                4293,
                4309,
                4317,
                4342,
                4370,
                4396,
                4426,
                4459,
                4496,
                4534,
                4560,
                4593,
                4616,
                4652,
                4689,
                4726,
                4752,
                4776,
                4802,
                4841,
                4885,
                4918,
                4942,
                4954,
                4967,
                4984,
                4998,
                5016,
                5029,
                5050,
                5075,
                5088,
                5104,
                5123,
                5137,
                5156,
                5170,
                5194,
                5212,
                5233,
                5251,
                5270,
                5296,
                5324,
                5346,
                5367,
                5387,
                5401,
                5426,
                5449,
                5469,
                5492,
                5523,
                5544,
                5568,
                5592,
                5621,
                5632,
                5647,
                5674,
                5690,
                5707,
                5719,
                5741,
                5763,
                5801,
                5842,
                5867,
                5895,
                5923,
                5942,
                5960,
                5976,
                5997,
                6013,
                6032,
                6046,
                6068,
                6098,
                6130,
                6156,
                6172,
                6191,
                6210,
                6226,
                6245,
                6264,
                6281,
                6301,
                6318,
                6338,
                6358,
                6378,
                6401,
                6423,
                6445,
                6465,
                6483,
                6504,
                6522,
                6545,
                6564,
                6587,
                6610,
                6629,
                6649,
                6669,
                6695,
                6726,
                6757,
                6785,
                6818,
                6844,
                6875,
                6899,
                6927,
                6951,
                6965,
                6982,
                7001,
                7023,
                7043,
                7058,
                7089,
                7115,
                7140,
                7177,
                7190,
                7206,
                7230,
                7252,
                7277,
                7297,
                7320,
                7349,
                7373,
                7401,
                7429,
                7458,
                7487,
                7511,
                7543,
                7562,
                7576,
                7603,
                7621,
                7633,
                7646,
                7658,
                7675,
                7695,
                7719,
                7743,
                7768,
                7793,
                7813,
                7835,
                7856,
                7885,
                7913,
                7943,
                7976,
                7999,
                8014,
                8033,
                8053,
                8068,
                8089,
                8105,
                8129,
                8151,
                8171,
                8192,
                8214,
                8234,
                8260,
                8278,
                8285,
                8305,
                8334,
                8361,
                8384,
                8416,
                8446,
                8469,
                8490,
                8514,
                8541,
                8552,
                8564,
                8580,
                8595,
                8611,
                8623,
                8639,
                8665,
                8685,
                8696,
                8718,
                8742,
                8754,
                8777,
                8787,
                8800,
                8817,
                8829,
                8846,
                8857,
                8866,
                8880,
                8892,
                8920,
                8942,
                8958,
                8977,
                8994,
                9006,
                9020,
                9051,
                9079,
                9112,
                9142,
                9157,
                9174,
                9194,
                9213,
                9232,
                9251,
                9268,
                9285,
                9309,
                9337,
                9363,
                9389,
                9408,
                9427,
                9444,
                9461,
                9489,
                9515,
                9541,
                9558,
                9573,
                9589,
                9608,
                9627,
                9645,
                9663,
                9685,
                9707,
                9737,
                9766,
                9788,
                9809,
                9838,
                9871,
                9894,
                9925,
                9957,
                9984,
                10022,
                10036,
                10053,
                10070,
                10090,
                10111,
                10132,
                10149,
                10166,
                10181,
                10204,
                10222,
                10237,
                10261,
                10285,
                10304,
                10319,
                10349,
                10368,
                10388,
                10407,
                10427,
                10454,
                10474,
                10489,
                10509,
                10527,
                10542,
                10567,
                10581,
                10600,
                10616,
                10632,
                10656,
                10672,
                10691,
                10711,
                10737,
                10763,
                10779,
                10798,
                10818,
                10841,
                10873,
                10895,
                10918,
                10941,
                10965,
                10987,
                11010,
                11034,
                11059,
                11082,
                11106,
                11128,
                11151,
                11174,
                11198,
                11220,
                11243,
                11267,
                11292,
                11315,
                11339,
                11361,
                11384,
                11407,
                11431,
                11453,
                11476,
                11500,
                11525,
                11548,
                11572,
                11594,
                11617,
                11640,
                11664,
                11686,
                11709,
                11733,
                11758,
                11781,
                11805,
                11835,
                11864,
                11895,
                11925,
                11954,
                11985,
                12016,
                12045,
                12076,
                12107,
                12136,
                12167,
                12198,
                12215,
                12235,
                12256,
                12274,
                12293,
                12306,
                12329,
                12344,
                12358,
                12375,
                12392,
                12405,
                12433,
                12457,
                12479,
                12512,
                12550,
                12588,
                12624,
                12660,
                12695,
                12718,
                12755,
                12781,
                12798,
                12818,
                12839,
                12859,
                12884,
                12909,
                12935,
                12961,
                12982,
                12992,
                13010,
                13029,
                13048,
                13068,
                13088,
                13109,
                13140,
                13169,
                13182,
                13197,
                13212,
                13233,
                13251,
                13273,
                13291,
                13320,
                13340,
                13354,
                13376,
                13390,
                13412,
                13424,
                13444,
                13475,
                13497,
                13535,
                13564,
                13604,
                13635,
                13661,
                13675,
                13690,
                13705,
                13725,
                13745,
                13758,
                13771,
                13787,
                13810,
                13826,
                13843,
                13859,
                13880,
                13901,
                13923,
                13945,
                13962,
                13980,
                13995,
                14013,
                14028,
                14046,
                14075,
                14096,
                14117,
                14149,
                14170,
                14202,
                14218,
                14234,
                14253,
                14286,
                14308,
                14330,
                14352,
                14377,
                14402,
                14438,
                14463,
                14499,
                14516,
                14533,
                14561,
                14579,
                14591,
                14604,
                14616,
                14632,
                14649,
                14662,
                14675,
                14692,
                14710,
                14724,
                14736,
                14749,
                14761,
                14777,
                14794,
                14807,
                14820,
                14837,
                14855,
                14869,
                14881,
                14894,
                14906,
                14922,
                14939,
                14952,
                14965,
                14982,
                15000,
                15014,
                15026,
                15039,
                15051,
                15067,
                15084,
                15097,
                15110,
                15127,
                15145,
                15159,
                15181,
                15204,
                15226,
                15250,
                15273,
                15292,
                15313,
                15336,
                15357,
                15380,
                15399,
                15420,
                15443,
                15464,
                15487,
                15506,
                15527,
                15550,
                15571,
                15594,
                15608,
                15625,
                15638,
                15660,
                15682,
                15700,
                15729,
                15746,
                15764,
                15781,
                15799,
                15816,
                15834,
                15851,
                15869,
                15891,
                15918,
                15943,
                15967,
                15985,
                16004,
                16023,
                16043,
                16066,
                16088,
                16099,
                16118,
                16138,
                16159,
                16181,
                16203,
                16226,
                16253,
                16273,
                16292,
                16303,
                16319,
                16339,
                16355,
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        public static partial class Amd
        {
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glBeginPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(Int32 monitor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glBeginPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(UInt32 monitor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] Int32[] monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] Int32* monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, [CountAttribute(Parameter = "n")] UInt32* monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glEndPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void EndPerfMonitor(Int32 monitor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glEndPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void EndPerfMonitor(UInt32 monitor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* monitors) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] Int32[] data, [OutAttribute, CountAttribute(Count = 1)] out Int32 bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] out Int32 data, [OutAttribute, CountAttribute(Count = 1)] out Int32 bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] Int32* data, [OutAttribute, CountAttribute(Count = 1)] Int32* bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] UInt32[] data, [OutAttribute, CountAttribute(Count = 1)] out Int32 bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] out UInt32 data, [OutAttribute, CountAttribute(Count = 1)] out Int32 bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] UInt32* data, [OutAttribute, CountAttribute(Count = 1)] Int32* bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute, CountAttribute(Count = 1)] out Int32 numCounters, [OutAttribute, CountAttribute(Count = 1)] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] Int32[] counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute, CountAttribute(Count = 1)] out Int32 numCounters, [OutAttribute, CountAttribute(Count = 1)] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] out Int32 counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(Int32 group, [OutAttribute, CountAttribute(Count = 1)] Int32* numCounters, [OutAttribute, CountAttribute(Count = 1)] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] Int32* counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute, CountAttribute(Count = 1)] out Int32 numCounters, [OutAttribute, CountAttribute(Count = 1)] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] UInt32[] counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute, CountAttribute(Count = 1)] out Int32 numCounters, [OutAttribute, CountAttribute(Count = 1)] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] out UInt32 counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(UInt32 group, [OutAttribute, CountAttribute(Count = 1)] Int32* numCounters, [OutAttribute, CountAttribute(Count = 1)] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] UInt32* counters) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out Int32 numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] Int32[] groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out Int32 numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] out Int32 groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out Int32 numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] UInt32[] groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out Int32 numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] out UInt32 groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] Int32* numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] Int32* groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] Int32* numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] UInt32* groups) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] Int32[] counterList) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] out Int32 counterList) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] Int32* counterList) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] UInt32[] counterList) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] out UInt32 counterList) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] UInt32* counterList) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Angle
        {
            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask">
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter">
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask">
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter">
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedANGLE")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedANGLE")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source">[length: bufsize]</param>
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String source) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "ANGLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorANGLE")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorANGLE")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Apple
        {
            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(Int32 destinationTexture, Int32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync">
            /// The sync object to be deleted.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glDeleteSyncAPPLE")]
            public static void DeleteSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES30.SyncCondition condition, OpenTK.Graphics.ES30.WaitSyncFlags flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glIsSyncAPPLE")]
            public static bool IsSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]</summary>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
            public static void ResolveMultisampleFramebuffer() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags must be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags must be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags must be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags must be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Cmaaintel
        {
            /// <summary>[requires: INTEL_framebuffer_CMAA]</summary>
            [AutoGenerated(Category = "INTEL_framebuffer_CMAA", Version = "", EntryPoint = "glApplyFramebufferAttachmentCMAAINTEL")]
            public static void ApplyFramebufferAttachment() { throw new BindingsNotRewrittenException(); }

        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation-dependent, but must be at least 32. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES30.All texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation-dependent, but must be at least 32. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES30.TextureUnit texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(Int32 program, Int32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(UInt32 program, UInt32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.All target, Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.ES30.All primitiveMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackPrimitiveType primitiveMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(Int32 program, Int32 index, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(UInt32 program, UInt32 index, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.All target, Int32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.All target, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.BufferTarget target, Int32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.BufferTarget target, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.All target, Int32 index, Int32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.All target, UInt32 index, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.BufferRangeTarget target, Int32 index, Int32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.BufferRangeTarget target, UInt32 index, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.All target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.All target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.BufferRangeTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.BufferRangeTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.All target, Int32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.All target, UInt32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, UInt32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.All target, Int32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.All target, UInt32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.RenderbufferTarget target, UInt32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(Int32 unit, Int32 sampler) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(UInt32 unit, UInt32 sampler) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap,
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.All target, Int32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap,
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.All target, UInt32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap,
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.TextureTarget target, Int32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap,
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.TextureTarget target, UInt32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.All target, Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackTarget target, Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackTarget target, UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies the name of the vertex array to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(Int32 array) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies the name of the vertex array to bind.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(UInt32 array) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha">
        /// specify the components of BlendColor
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendColor")]
        public static void BlendColor(Single red, Single green, Single blue, Single alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES30.All sfactor, OpenTK.Graphics.ES30.All dfactor) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES30.BlendingFactorSrc sfactor, OpenTK.Graphics.ES30.BlendingFactorDest dfactor) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES30.All sfactorRGB, OpenTK.Graphics.ES30.All dfactorRGB, OpenTK.Graphics.ES30.All sfactorAlpha, OpenTK.Graphics.ES30.All dfactorAlpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES30.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES30.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES30.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES30.BlendingFactorDest dfactorAlpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask">
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter">
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask">
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter">
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.All target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES30.All usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.All target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data, OpenTK.Graphics.ES30.All usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES30.BufferUsageHint usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data, OpenTK.Graphics.ES30.BufferUsageHint usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specify the target of the framebuffer completeness check.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES30.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specify the target of the framebuffer completeness check.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES30.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES30.FramebufferTarget target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES30.All mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES30.ClearBufferMask mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Single depth, Int32 stencil) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearColor")]
        public static void ClearColor(Single red, Single green, Single blue, Single alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(Single d) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(Int32 s) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(Int32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(UInt32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.ES30.All readTarget, OpenTK.Graphics.ES30.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.ES30.BufferTarget readTarget, OpenTK.Graphics.ES30.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba, R8, Rg8, Rgb565, Rgb8, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Srgb8, Srgb8Alpha8, R8i, R8ui, R16i, R16ui, R32i, R32ui, Rg8i, Rg8ui, Rg16i, Rg16ui, Rg32i, Rg32ui, Rgba8i, Rgba8ui, Rgb10A2ui, Rgba16i, Rgba16ui, Rgba32i, Rgba32ui.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba, R8, Rg8, Rgb565, Rgb8, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Srgb8, Srgb8Alpha8, R8i, R8ui, R16i, R16ui, R32i, R32ui, Rg8i, Rg8ui, Rg16i, Rg16ui, Rg32i, Rg32ui, Rgba8i, Rgba8ui, Rgb10A2ui, Rgba16i, Rgba16ui, Rgba32i, Rgba32ui.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureCopyComponentCount internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static Int32 CreateProgram() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates a shader object
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to be created. Must be one of VertexShader or FragmentShader.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenTK.Graphics.ES30.All type) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Creates a shader object
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to be created. Must be one of VertexShader or FragmentShader.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenTK.Graphics.ES30.ShaderType type) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES30.CullFaceMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr[] userParam) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] Int32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] Int32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] Int32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] Int32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, Int32 id, OpenTK.Graphics.ES30.All severity, Int32 length, [CountAttribute(Computed = "buf,length")] string buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, UInt32 id, OpenTK.Graphics.ES30.All severity, Int32 length, [CountAttribute(Computed = "buf,length")] string buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, Int32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, [CountAttribute(Computed = "buf,length")] string buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, UInt32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, [CountAttribute(Computed = "buf,length")] string buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] Int32[] samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] Int32* samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(Int32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(UInt32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// The sync object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSync")]
        public static void DeleteSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32[] arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32* arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES30.All func) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES30.DepthFunction func) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(Single n, Single f) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(Int32 program, Int32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(UInt32 program, UInt32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="cap"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES30.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="cap"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES30.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(Int32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(UInt32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All[] bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.All bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All* bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES30.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES30.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(Int32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(UInt32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.ES30.QueryTarget target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static void EndTransformFeedback() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.SyncCondition condition, OpenTK.Graphics.ES30.WaitSyncFlags flags) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFinish")]
        public static void Finish() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFlush")]
        public static void Flush() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All renderbuffertarget, Int32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All renderbuffertarget, UInt32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="textarget">
        /// Specifies a 2D texture target, or for cube map textures, which face is to be attached.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="textarget">
        /// Specifies a 2D texture target, or for cube map textures, which face is to be attached.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="textarget">
        /// Specifies a 2D texture target, or for cube map textures, which face is to be attached.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget2d textarget, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="textarget">
        /// Specifies a 2D texture target, or for cube map textures, which face is to be attached.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget2d textarget, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachmment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level, Int32 layer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachmment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level, Int32 layer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachmment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachmment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES30.FrontFaceDirection mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture2D, Texture3D, Texture2DArray or TextureCubeMap.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture2D, Texture3D, Texture2DArray or TextureCubeMap.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES30.TextureTarget target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] Int32* samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* samplers) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32[] uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32[] uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref Int32 uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref Int32 uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32* uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32* uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32[] uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32[] uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref UInt32 uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref UInt32 uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32* uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32* uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] Int32[] shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out Int32 shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] Int32* shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32[] shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out UInt32 shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32* shaders) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All types, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* types, [OutAttribute, CountAttribute(Parameter = "count")] Int32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] Int32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All types, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES30.ErrorCode GetError() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(Int32 program, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(UInt32 program, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatus")]
        public static OpenTK.Graphics.ES30.ResetStatus GetGraphicsResetStatus() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of integers that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES30.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] binary) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] binary) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32[] range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute, CountAttribute(Count = 2)] out Int32 range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32* range, [OutAttribute, CountAttribute(Count = 1)] Int32* precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32[] range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] out Int32 range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32* range, [OutAttribute, CountAttribute(Count = 1)] Int32* precision) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES30.All name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES30.StringName name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.All name, Int32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.All name, UInt32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.StringNameIndexed name, Int32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.StringNameIndexed name, UInt32 index) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES30.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName">[length: COMPSIZE()]
        /// Specifies the address an array of characters containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(Int32 program, [CountAttribute(Computed = "")] string uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName">[length: COMPSIZE()]
        /// Specifies the address an array of characters containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(UInt32 program, [CountAttribute(Computed = "")] string uniformBlockName) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] Int32[] uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] out Int32 uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] Int32* uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32[] uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] out UInt32 uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32* uniformIndices) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, string name) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.VertexAttribEnum pname, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. FragmentShaderDerivativeHint, and GenerateMipmapHint are accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. FragmentShaderDerivativeHint, and GenerateMipmapHint are accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES30.HintTarget target, OpenTK.Graphics.ES30.HintMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All[] attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES30.All attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All* attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.FramebufferAttachment[] attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES30.FramebufferAttachment attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.FramebufferAttachment* attachments) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES30.All attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All* attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES30.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Invalidate portions of the contents of attachments within a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the invalidate operation. Must be Framebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// Specifies how many attachments are supplied in the attachments list.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// A list of numAttachments attachments to invalidate.
        /// </param>
        /// <param name="x">
        /// Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="y">
        /// Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).
        /// </param>
        /// <param name="width">
        /// Specifies the width of the pixel rectangle to invalidate.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the pixel rectangle to invalidate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES30.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(Int32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(UInt32 framebuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(Int32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(UInt32 renderbuffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(Int32 sampler) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(UInt32 sampler) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(Int32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(UInt32 shader) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies a value that may be the name of a sync object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSync")]
        public static bool IsSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a transform feedback object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(Int32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a transform feedback object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(UInt32 id) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies a value that may be the name of a vertex array object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(Int32 array) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies a value that may be the name of a vertex array object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(UInt32 array) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(Single width) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.All access) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.BufferAccessMask access) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr[] ptr, Int32 length, [CountAttribute(Computed = "label,length")] string label) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Pause transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glPauseTransformFeedback")]
        public static void PauseTransformFeedback() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES30.PixelStoreParameter pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(Single factor, Single units) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, Int32 id, Int32 length, [CountAttribute(Computed = "message,length")] string message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, UInt32 id, Int32 length, [CountAttribute(Computed = "message,length")] string message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.DebugSource source, Int32 id, Int32 length, [CountAttribute(Computed = "message,length")] string message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.DebugSource source, UInt32 id, Int32 length, [CountAttribute(Computed = "message,length")] string message) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="src">
        /// Specifies a color buffer. Accepted values are Back, None, and ColorAttachmenti.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.ES30.All src) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="src">
        /// Specifies a color buffer. Accepted values are Back, None, and ColorAttachmenti.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.ES30.ReadBufferMode src) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Rgba, and RgbaInteger. An implementation-chosen format will also be accepted. This can be queried with glGet and ImplementationColorReadFormat.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedInt, Int, or Float. An implementation-chosen type will also be accepted. This can be queried with glGet and ImplementationColorReadType.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Rgba, and RgbaInteger. An implementation-chosen format will also be accepted. This can be queried with glGet and ImplementationColorReadFormat.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedInt, Int, or Float. An implementation-chosen type will also be accepted. This can be queried with glGet and ImplementationColorReadType.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Rgba, and RgbaInteger. An implementation-chosen format will also be accepted. This can be queried with glGet and ImplementationColorReadFormat.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedInt, Int, or Float. An implementation-chosen type will also be accepted. This can be queried with glGet and ImplementationColorReadType.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Rgba, and RgbaInteger. An implementation-chosen format will also be accepted. This can be queried with glGet and ImplementationColorReadFormat.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedInt, Int, or Float. An implementation-chosen type will also be accepted. This can be queried with glGet and ImplementationColorReadType.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Release resources consumed by the implementation's shader compiler
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples">
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples">
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Resume transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glResumeTransformFeedback")]
        public static void ResumeTransformFeedback() { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(Single value, bool invert) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glScissor")]
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] Int32[] length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] ref Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] Int32* length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] Int32[] length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] ref Int32 length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] Int32* length) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. Stencil comparison operations and queries of ref clamp its value to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.All face, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.All face, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.StencilFace face, Int32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.StencilFace face, UInt32 mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES30.All fail, OpenTK.Graphics.ES30.All zfail, OpenTK.Graphics.ES30.All zpass) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES30.StencilOp fail, OpenTK.Graphics.ES30.StencilOp zfail, OpenTK.Graphics.ES30.StencilOp zpass) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All sfail, OpenTK.Graphics.ES30.All dpfail, OpenTK.Graphics.ES30.All dppass) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilOp sfail, OpenTK.Graphics.ES30.StencilOp dpfail, OpenTK.Graphics.ES30.StencilOp dppass) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 2048 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support texture images that are at least 2048 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Single param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Single[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Single* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Int32 param) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a two-dimensional texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture2D, or TextureCubeMap.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a two-dimensional texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture2D, or TextureCubeMap.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in texels.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture3D, or Texture2DArray.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, [CountAttribute(Parameter = "count")] string[] varyings, OpenTK.Graphics.ES30.All bufferMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, [CountAttribute(Parameter = "count")] string[] varyings, OpenTK.Graphics.ES30.TransformFeedbackMode bufferMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, [CountAttribute(Parameter = "count")] string[] varyings, OpenTK.Graphics.ES30.All bufferMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, [CountAttribute(Parameter = "count")] string[] varyings, OpenTK.Graphics.ES30.TransformFeedbackMode bufferMode) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(Int32 location, Single v0) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(Int32 location, Int32 v0) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, UInt32 v0) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(Int32 location, Single v0, Single v1) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(Int32 location, Int32 v0, Int32 v1) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, UInt32 v0, UInt32 v1) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(Int32 location, Single v0, Single v1, Single v2) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// The index of the active uniform block within program whose binding to assign.
        /// </param>
        /// <param name="uniformBlockBinding">
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// The index of the active uniform block within program whose binding to assign.
        /// </param>
        /// <param name="uniformBlockBinding">
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="target"></param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.ES30.BufferTarget target) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single x) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single x) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, [CountAttribute(Count = 1)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, [CountAttribute(Count = 1)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single x, Single y) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single x, Single y) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// Specify the index of the generic vertex attribute.
        /// </param>
        /// <param name="divisor">
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// Specify the index of the generic vertex attribute.
        /// </param>
        /// <param name="divisor">
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt32[] v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref UInt32 v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt32* v) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed. This parameter is ignored if type is Fixed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr[] pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glViewport")]
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, Int64 timeout) { throw new BindingsNotRewrittenException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, UInt64 timeout) { throw new BindingsNotRewrittenException(); }

        public static partial class Ext
        {
            /// <summary>[requires: EXT_win32_keyed_mutex]</summary>
            /// <param name="memory"></param>
            /// <param name="key"></param>
            /// <param name="timeout"></param>
            [AutoGenerated(Category = "EXT_win32_keyed_mutex", Version = "", EntryPoint = "glAcquireKeyedMutexWin32EXT")]
            [CLSCompliant(false)]
            public static bool AcquireKeyedMutexWin32(Int32 memory, Int64 key, Int32 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_win32_keyed_mutex]</summary>
            /// <param name="memory"></param>
            /// <param name="key"></param>
            /// <param name="timeout"></param>
            [AutoGenerated(Category = "EXT_win32_keyed_mutex", Version = "", EntryPoint = "glAcquireKeyedMutexWin32EXT")]
            [CLSCompliant(false)]
            public static bool AcquireKeyedMutexWin32(UInt32 memory, UInt64 key, UInt32 timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program">
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(Int32 pipeline, Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program">
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.All target, Int32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, Int32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, UInt32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Bind a user-defined varying out variable to a fragment shader color number
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to modify
            /// </param>
            /// <param name="color">
            /// The color number to bind the user-defined varying out variable to
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the user-defined varying out variable whose binding to modify
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glBindFragDataLocationEXT")]
            [CLSCompliant(false)]
            public static void BindFragDataLocation(Int32 program, Int32 color, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Bind a user-defined varying out variable to a fragment shader color number
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to modify
            /// </param>
            /// <param name="color">
            /// The color number to bind the user-defined varying out variable to
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the user-defined varying out variable whose binding to modify
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glBindFragDataLocationEXT")]
            [CLSCompliant(false)]
            public static void BindFragDataLocation(UInt32 program, UInt32 color, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Bind a user-defined varying out variable to a fragment shader color number and index
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to modify
            /// </param>
            /// <param name="colorNumber">
            /// The color number to bind the user-defined varying out variable to
            /// </param>
            /// <param name="index">
            /// The index of the color input to bind the user-defined varying out variable to
            /// </param>
            /// <param name="name">
            /// The name of the user-defined varying out variable whose binding to modify
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glBindFragDataLocationIndexedEXT")]
            [CLSCompliant(false)]
            public static void BindFragDataLocationIndexed(Int32 program, Int32 colorNumber, Int32 index, string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Bind a user-defined varying out variable to a fragment shader color number and index
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to modify
            /// </param>
            /// <param name="colorNumber">
            /// The color number to bind the user-defined varying out variable to
            /// </param>
            /// <param name="index">
            /// The index of the color input to bind the user-defined varying out variable to
            /// </param>
            /// <param name="name">
            /// The name of the user-defined varying out variable whose binding to modify
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glBindFragDataLocationIndexedEXT")]
            [CLSCompliant(false)]
            public static void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(Int32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(UInt32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES30.All src, OpenTK.Graphics.ES30.All dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES30.All src, OpenTK.Graphics.ES30.All dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES30.All srcRGB, OpenTK.Graphics.ES30.All dstRGB, OpenTK.Graphics.ES30.All srcAlpha, OpenTK.Graphics.ES30.All dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES30.All srcRGB, OpenTK.Graphics.ES30.All dstRGB, OpenTK.Graphics.ES30.All srcAlpha, OpenTK.Graphics.ES30.All dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_buffer_storage]
            /// Creates and initializes a buffer object's immutable data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">[length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="flags">
            /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_buffer_storage", Version = "", EntryPoint = "glBufferStorageEXT")]
            public static void BufferStorage(OpenTK.Graphics.ES30.All target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_buffer_storage]
            /// Creates and initializes a buffer object's immutable data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">[length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="flags">
            /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_buffer_storage", Version = "", EntryPoint = "glBufferStorageEXT")]
            public static void BufferStorage(OpenTK.Graphics.ES30.All target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_buffer_storage]
            /// Creates and initializes a buffer object's immutable data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">[length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="flags">
            /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
            /// </param>
            [AutoGenerated(Category = "EXT_buffer_storage", Version = "", EntryPoint = "glBufferStorageEXT")]
            public static void BufferStorage(OpenTK.Graphics.ES30.BufferStorageTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES30.MapBufferUsageMask flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_buffer_storage]
            /// Creates and initializes a buffer object's immutable data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">[length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="flags">
            /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
            /// </param>
            [AutoGenerated(Category = "EXT_buffer_storage", Version = "", EntryPoint = "glBufferStorageEXT")]
            public static void BufferStorage(OpenTK.Graphics.ES30.BufferStorageTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr[] data, OpenTK.Graphics.ES30.MapBufferUsageMask flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="target"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glBufferStorageExternalEXT")]
            public static void BufferStorageExternal(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="target"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glBufferStorageExternalEXT")]
            public static void BufferStorageExternal(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.MapBufferUsageMask flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void BufferStorageMem(OpenTK.Graphics.ES30.All target, IntPtr size, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void BufferStorageMem(OpenTK.Graphics.ES30.All target, IntPtr size, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void BufferStorageMem(OpenTK.Graphics.ES30.BufferTargetARB target, IntPtr size, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void BufferStorageMem(OpenTK.Graphics.ES30.BufferTargetARB target, IntPtr size, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] Int32[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] ref Int32 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static unsafe void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] Int32* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] UInt32[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="offset"></param>
            /// <param name="n"></param>
            /// <param name="values">[length: n]</param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glClearPixelLocalStorageuiEXT")]
            [CLSCompliant(false)]
            public static unsafe void ClearPixelLocalStorage(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] UInt32* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(Int32 texture, Int32 level, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(Int32 texture, Int32 level, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(Int32 texture, Int32 level, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(Int32 texture, Int32 level, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(UInt32 texture, Int32 level, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(UInt32 texture, Int32 level, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(UInt32 texture, Int32 level, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexImage(UInt32 texture, Int32 level, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clear_texture]
            /// Fills all or part of a texture image with a constant value
            /// </summary>
            /// <param name="texture">
            /// The name of an existing texture object containing the image to be cleared.
            /// </param>
            /// <param name="level">
            /// The level of texture containing the region to be cleared.
            /// </param>
            /// <param name="xoffset">
            /// The coordinate of the left edge of the region to be cleared.
            /// </param>
            /// <param name="yoffset">
            /// The coordinate of the lower edge of the region to be cleared.
            /// </param>
            /// <param name="zoffset">
            /// The coordinate of the front of the region to be cleared.
            /// </param>
            /// <param name="width">
            /// The width of the region to be cleared.
            /// </param>
            /// <param name="height">
            /// The height of the region to be cleared.
            /// </param>
            /// <param name="depth">
            /// The depth of the region to be cleared.
            /// </param>
            /// <param name="format">
            /// The format of the data whose address in memory is given by data.
            /// </param>
            /// <param name="type">
            /// The type of the data whose address in memory is given by data.
            /// </param>
            /// <param name="data">[length: COMPSIZE(format,type)]
            /// The address in memory of the data to be used to clear the specified region.
            /// </param>
            [AutoGenerated(Category = "EXT_clear_texture", Version = "", EntryPoint = "glClearTexSubImageEXT")]
            [CLSCompliant(false)]
            public static void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_clip_control]</summary>
            /// <param name="origin"></param>
            /// <param name="depth"></param>
            [AutoGenerated(Category = "EXT_clip_control", Version = "", EntryPoint = "glClipControlEXT")]
            public static void ClipControl(OpenTK.Graphics.ES30.All origin, OpenTK.Graphics.ES30.All depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="r">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="g">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="b">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiEXT")]
            [CLSCompliant(false)]
            public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="r">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="g">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="b">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiEXT")]
            [CLSCompliant(false)]
            public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES30.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES30.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES30.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES30.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void CreateMemoryObjects(Int32 n, [OutAttribute] Int32[] memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void CreateMemoryObjects(Int32 n, [OutAttribute] out Int32 memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static unsafe void CreateMemoryObjects(Int32 n, [OutAttribute] Int32* memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void CreateMemoryObjects(Int32 n, [OutAttribute] UInt32[] memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void CreateMemoryObjects(Int32 n, [OutAttribute] out UInt32 memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glCreateMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static unsafe void CreateMemoryObjects(Int32 n, [OutAttribute] UInt32* memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="@string">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.All type, string @string) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="@string">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.ShaderType type, string @string) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="count">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            /// <param name="strings">[length: count]
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramvEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.All type, Int32 count, [CountAttribute(Parameter = "count")] string[] strings) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="count">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            /// <param name="strings">[length: count]
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramvEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.ShaderType type, Int32 count, [CountAttribute(Parameter = "count")] string[] strings) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] Int32[] memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] Int32* memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="n"></param>
            /// <param name="memoryObjects">[length: n]</param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glDeleteMemoryObjectsEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteMemoryObjects(Int32 n, [CountAttribute(Parameter = "n")] UInt32* memoryObjects) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] Int32[] pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] Int32* pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] UInt32* pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] Int32[] semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] Int32* semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteSemaphores(Int32 n, [CountAttribute(Parameter = "n")] UInt32* semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All[] attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES30.All attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES30.All* attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a range of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawArraysInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a range of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawArraysInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a range of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawArraysInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a range of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawArraysInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All[] bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.All bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All* bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All[] location, [CountAttribute(Parameter = "n")] Int32[] indices) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.All location, [CountAttribute(Parameter = "n")] ref Int32 indices) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffersIndexed(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All* location, [CountAttribute(Parameter = "n")] Int32* indices) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexEXT")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexEXT")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexEXT")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexEXT")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Draw multiple instances of a set of elements with offset applied to instanced attributes
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_base_instance]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            /// <param name="baseinstance">
            /// Specifies the base instance for use in fetching instanced vertex attributes.
            /// </param>
            [AutoGenerated(Category = "EXT_base_instance", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.PrimitiveType type, [CountAttribute(Parameter = "count")] IntPtr[] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedback(OpenTK.Graphics.ES30.All mode, Int32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedback(OpenTK.Graphics.ES30.All mode, UInt32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedback(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedback(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render multiple instances of primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the geometry to render.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedbackInstanced(OpenTK.Graphics.ES30.All mode, Int32 id, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render multiple instances of primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the geometry to render.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedbackInstanced(OpenTK.Graphics.ES30.All mode, UInt32 id, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render multiple instances of primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the geometry to render.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedbackInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 id, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_transform_feedback]
            /// Render multiple instances of primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the geometry to render.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_transform_feedback", Version = "", EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawTransformFeedbackInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 id, Int32 instancecount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glEndQueryEXT")]
            public static void EndQuery(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glEndQueryEXT")]
            public static void EndQuery(OpenTK.Graphics.ES30.QueryTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glFramebufferPixelLocalStorageSizeEXT")]
            [CLSCompliant(false)]
            public static void FramebufferPixelLocalStorageSize(Int32 target, Int32 size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="target"></param>
            /// <param name="size"></param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glFramebufferPixelLocalStorageSizeEXT")]
            [CLSCompliant(false)]
            public static void FramebufferPixelLocalStorageSize(UInt32 target, Int32 size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, Int32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, UInt32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n]
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="n"></param>
            /// <param name="semaphores">[length: n]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenSemaphores(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* semaphores) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the bindings of color indices to user-defined varying out variables
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to query
            /// </param>
            /// <param name="name">
            /// The name of the user-defined varying out variable whose index to query
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetFragDataIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetFragDataIndex(Int32 program, string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the bindings of color indices to user-defined varying out variables
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to query
            /// </param>
            /// <param name="name">
            /// The name of the user-defined varying out variable whose index to query
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetFragDataIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetFragDataIndex(UInt32 program, string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="target"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glGetFramebufferPixelLocalStorageSizeEXT")]
            public static Int32 GetFramebufferPixelLocalStorageSize(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_shader_pixel_local_storage2]</summary>
            /// <param name="target"></param>
            [AutoGenerated(Category = "EXT_shader_pixel_local_storage2", Version = "", EntryPoint = "glGetFramebufferPixelLocalStorageSizeEXT")]
            public static Int32 GetFramebufferPixelLocalStorageSize(OpenTK.Graphics.ES30.FramebufferTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusEXT")]
            public static OpenTK.Graphics.ES30.GraphicsResetStatus GetGraphicsResetStatus() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] out Int32 data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] out Int32 data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetMemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glGetMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetMemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.PipelineParameterName pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the fragment color index of a named variable within a program
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the resource to query the location of.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetProgramResourceLocationIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetProgramResourceLocationIndex(Int32 program, OpenTK.Graphics.ES30.All programInterface, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the fragment color index of a named variable within a program
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the resource to query the location of.
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetProgramResourceLocationIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetProgramResourceLocationIndex(Int32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the fragment color index of a named variable within a program
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the resource to query the location of.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetProgramResourceLocationIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetProgramResourceLocationIndex(UInt32 program, OpenTK.Graphics.ES30.All programInterface, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_blend_func_extended]
            /// Query the fragment color index of a named variable within a program
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="name">[length: COMPSIZE(name)]
            /// The name of the resource to query the location of.
            /// </param>
            [AutoGenerated(Category = "EXT_blend_func_extended", Version = "", EntryPoint = "glGetProgramResourceLocationIndexEXT")]
            [CLSCompliant(false)]
            public static Int32 GetProgramResourceLocationIndex(UInt32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, [CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(pname)]
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] out UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Byte[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Byte data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetUnsignedByte(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Byte* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Byte[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Byte data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytei_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetUnsignedByte(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Byte* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Byte[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Byte data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetUnsignedByte(OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Byte* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Byte[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static void GetUnsignedByte(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Byte data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object|EXT_semaphore]</summary>
            /// <param name="pname"></param>
            /// <param name="data">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_memory_object|EXT_semaphore", Version = "", EntryPoint = "glGetUnsignedBytevEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetUnsignedByte(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Byte* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_fd]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_fd", Version = "", EntryPoint = "glImportMemoryFdEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryF(Int32 memory, Int64 size, OpenTK.Graphics.ES30.All handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_fd]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [AutoGenerated(Category = "EXT_memory_object_fd", Version = "", EntryPoint = "glImportMemoryFdEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryF(Int32 memory, Int64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_fd]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_fd", Version = "", EntryPoint = "glImportMemoryFdEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryF(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.All handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_fd]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [AutoGenerated(Category = "EXT_memory_object_fd", Version = "", EntryPoint = "glImportMemoryFdEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryF(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(Int32 memory, Int64 size, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(Int32 memory, Int64 size, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(Int32 memory, Int64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(Int32 memory, Int64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Handle(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(Int32 memory, Int64 size, OpenTK.Graphics.ES30.All handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(Int32 memory, Int64 size, OpenTK.Graphics.ES30.All handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(Int32 memory, Int64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(Int32 memory, Int64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.All handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.All handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object_win32]</summary>
            /// <param name="memory"></param>
            /// <param name="size"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_memory_object_win32", Version = "", EntryPoint = "glImportMemoryWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportMemoryWin32Name(UInt32 memory, UInt64 size, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_fd]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_fd", Version = "", EntryPoint = "glImportSemaphoreFdEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreF(Int32 semaphore, OpenTK.Graphics.ES30.All handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_fd]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [AutoGenerated(Category = "EXT_semaphore_fd", Version = "", EntryPoint = "glImportSemaphoreFdEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreF(Int32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_fd]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_fd", Version = "", EntryPoint = "glImportSemaphoreFdEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreF(UInt32 semaphore, OpenTK.Graphics.ES30.All handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_fd]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="fd"></param>
            [AutoGenerated(Category = "EXT_semaphore_fd", Version = "", EntryPoint = "glImportSemaphoreFdEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreF(UInt32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, Int32 fd) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(Int32 semaphore, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(Int32 semaphore, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(Int32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(Int32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(UInt32 semaphore, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(UInt32 semaphore, OpenTK.Graphics.ES30.All handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(UInt32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32HandleEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Handle(UInt32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, [OutAttribute] IntPtr[] handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(Int32 semaphore, OpenTK.Graphics.ES30.All handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(Int32 semaphore, OpenTK.Graphics.ES30.All handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(Int32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(Int32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(UInt32 semaphore, OpenTK.Graphics.ES30.All handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(UInt32 semaphore, OpenTK.Graphics.ES30.All handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(UInt32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore_win32]</summary>
            /// <param name="semaphore"></param>
            /// <param name="handleType"></param>
            /// <param name="name"></param>
            [AutoGenerated(Category = "EXT_semaphore_win32", Version = "", EntryPoint = "glImportSemaphoreWin32NameEXT")]
            [CLSCompliant(false)]
            public static void ImportSemaphoreWin32Name(UInt32 semaphore, OpenTK.Graphics.ES30.ExternalHandleType handleType, IntPtr[] name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glInsertEventMarkerEXT")]
            public static void InsertEventMarker(Int32 length, string marker) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glIsMemoryObjectEXT")]
            [CLSCompliant(false)]
            public static bool IsMemoryObject(Int32 memoryObject) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glIsMemoryObjectEXT")]
            [CLSCompliant(false)]
            public static bool IsMemoryObject(UInt32 memoryObject) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(Int32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(UInt32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id">
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(Int32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id">
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(UInt32 id) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glIsSemaphoreEXT")]
            [CLSCompliant(false)]
            public static bool IsSemaphore(Int32 semaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glIsSemaphoreEXT")]
            [CLSCompliant(false)]
            public static bool IsSemaphore(UInt32 semaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.BufferAccessMask access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <param name="bottom"></param>
            /// <param name="top"></param>
            /// <param name="zNear"></param>
            /// <param name="zFar"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static void MatrixFrustum(OpenTK.Graphics.ES30.All mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <param name="bottom"></param>
            /// <param name="top"></param>
            /// <param name="zNear"></param>
            /// <param name="zFar"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static void MatrixFrustum(OpenTK.Graphics.ES30.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static void MatrixLoadIdentity(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static void MatrixLoadIdentity(OpenTK.Graphics.ES30.MatrixMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Double m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Double* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.ES30.All mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="m">[length: 16]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.ES30.MatrixMode mode, [CountAttribute(Count = 16)] Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <param name="bottom"></param>
            /// <param name="top"></param>
            /// <param name="zNear"></param>
            /// <param name="zFar"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static void MatrixOrtho(OpenTK.Graphics.ES30.All mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <param name="bottom"></param>
            /// <param name="top"></param>
            /// <param name="zNear"></param>
            /// <param name="zFar"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static void MatrixOrtho(OpenTK.Graphics.ES30.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static void MatrixPop(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static void MatrixPop(OpenTK.Graphics.ES30.MatrixMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static void MatrixPush(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static void MatrixPush(OpenTK.Graphics.ES30.MatrixMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="angle"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static void MatrixRotate(OpenTK.Graphics.ES30.All mode, Double angle, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="angle"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static void MatrixRotate(OpenTK.Graphics.ES30.MatrixMode mode, Double angle, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="angle"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static void MatrixRotate(OpenTK.Graphics.ES30.All mode, Single angle, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="angle"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static void MatrixRotate(OpenTK.Graphics.ES30.MatrixMode mode, Single angle, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static void MatrixScale(OpenTK.Graphics.ES30.All mode, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static void MatrixScale(OpenTK.Graphics.ES30.MatrixMode mode, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static void MatrixScale(OpenTK.Graphics.ES30.All mode, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static void MatrixScale(OpenTK.Graphics.ES30.MatrixMode mode, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.ES30.All mode, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.ES30.MatrixMode mode, Double x, Double y, Double z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.ES30.All mode, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="mode"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.ES30.MatrixMode mode, Single x, Single y, Single z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.All pname, Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void MemoryObjectParameter(Int32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.All pname, Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="memoryObject"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glMemoryObjectParameterivEXT")]
            [CLSCompliant(false)]
            public static unsafe void MemoryObjectParameter(UInt32 memoryObject, OpenTK.Graphics.ES30.MemoryObjectParameterName pname, Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "primcount")] Int32[] first, [CountAttribute(Computed = "primcount")] Int32[] count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "primcount")] ref Int32 first, [CountAttribute(Computed = "primcount")] ref Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "primcount")] Int32* first, [CountAttribute(Computed = "primcount")] Int32* count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "primcount")] Int32[] first, [CountAttribute(Computed = "primcount")] Int32[] count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref Int32 first, [CountAttribute(Computed = "primcount")] ref Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "primcount")] Int32* first, [CountAttribute(Computed = "primcount")] Int32* count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render multiple sets of primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of an array of structures containing the draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the the number of elements in the array of draw parameter structures.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectEXT")]
            public static void MultiDrawArraysIndirect(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render multiple sets of primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of an array of structures containing the draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the the number of elements in the array of draw parameter structures.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectEXT")]
            public static void MultiDrawArraysIndirect(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr[] indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render multiple sets of primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of an array of structures containing the draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the the number of elements in the array of draw parameter structures.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectEXT")]
            public static void MultiDrawArraysIndirect(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render multiple sets of primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of an array of structures containing the draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the the number of elements in the array of draw parameter structures.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectEXT")]
            public static void MultiDrawArraysIndirect(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr[] indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex]
            /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(drawcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count, indices and basevertex arrays.
            /// </param>
            /// <param name="basevertex">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the base vertices are stored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex", Version = "", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "drawcount")] IntPtr[] indices, Int32 primcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex]
            /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(drawcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count, indices and basevertex arrays.
            /// </param>
            /// <param name="basevertex">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the base vertices are stored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex", Version = "", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 primcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex]
            /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(drawcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count, indices and basevertex arrays.
            /// </param>
            /// <param name="basevertex">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the base vertices are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex", Version = "", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr[] indices, Int32 primcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex]
            /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(drawcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count, indices and basevertex arrays.
            /// </param>
            /// <param name="basevertex">[length: COMPSIZE(drawcount)]
            /// Specifies a pointer to the location where the base vertices are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_elements_base_vertex|OES_draw_elements_base_vertex", Version = "", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 primcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "primcount")] Int32[] count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "primcount")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES30.All mode, [CountAttribute(Computed = "primcount")] Int32* count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "primcount")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "primcount")] Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "primcount")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, [CountAttribute(Computed = "primcount")] Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "primcount")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render indexed primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="type">
            /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of a structure containing an array of draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the number of elements in the array addressed by indirect.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectEXT")]
            public static void MultiDrawElementsIndirect(OpenTK.Graphics.ES30.All mode, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render indexed primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="type">
            /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of a structure containing an array of draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the number of elements in the array addressed by indirect.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectEXT")]
            public static void MultiDrawElementsIndirect(OpenTK.Graphics.ES30.All mode, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "drawcount,stride")] IntPtr[] indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render indexed primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="type">
            /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of a structure containing an array of draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the number of elements in the array addressed by indirect.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectEXT")]
            public static void MultiDrawElementsIndirect(OpenTK.Graphics.ES30.PrimitiveType mode, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multi_draw_indirect]
            /// Render indexed primitives from array data, taking parameters from memory
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="type">
            /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
            /// </param>
            /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
            /// Specifies the address of a structure containing an array of draw parameters.
            /// </param>
            /// <param name="drawcount">
            /// Specifies the number of elements in the array addressed by indirect.
            /// </param>
            /// <param name="stride">
            /// Specifies the distance in basic machine units between elements of the draw parameter array.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectEXT")]
            public static void MultiDrawElementsIndirect(OpenTK.Graphics.ES30.PrimitiveType mode, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "drawcount,stride")] IntPtr[] indirect, Int32 drawcount, Int32 stride) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="buffer"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glNamedBufferStorageExternalEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageExternal(Int32 buffer, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="buffer"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glNamedBufferStorageExternalEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageExternal(Int32 buffer, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.MapBufferUsageMask flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="buffer"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glNamedBufferStorageExternalEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageExternal(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.All flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_external_buffer]</summary>
            /// <param name="buffer"></param>
            /// <param name="offset"></param>
            /// <param name="size"></param>
            /// <param name="clientBuffer"></param>
            /// <param name="flags"></param>
            [AutoGenerated(Category = "EXT_external_buffer", Version = "", EntryPoint = "glNamedBufferStorageExternalEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageExternal(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr clientBuffer, OpenTK.Graphics.ES30.MapBufferUsageMask flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="buffer"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glNamedBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageMem(Int32 buffer, IntPtr size, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="buffer"></param>
            /// <param name="size"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glNamedBufferStorageMemEXT")]
            [CLSCompliant(false)]
            public static void NamedBufferStorageMem(UInt32 buffer, IntPtr size, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname">
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value">
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_tessellation_shader", Version = "", EntryPoint = "glPatchParameteriEXT")]
            public static void PatchParameter(OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname">
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value">
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            [AutoGenerated(Category = "EXT_tessellation_shader", Version = "", EntryPoint = "glPatchParameteriEXT")]
            public static void PatchParameter(OpenTK.Graphics.ES30.PatchParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_polygon_offset_clamp]</summary>
            /// <param name="factor"></param>
            /// <param name="units"></param>
            /// <param name="clamp"></param>
            [AutoGenerated(Category = "EXT_polygon_offset_clamp", Version = "", EntryPoint = "glPolygonOffsetClampEXT")]
            public static void PolygonOffsetClamp(Single factor, Single units, Single clamp) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPopGroupMarkerEXT")]
            public static void PopGroupMarker() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_primitive_bounding_box]</summary>
            /// <param name="minX"></param>
            /// <param name="minY"></param>
            /// <param name="minZ"></param>
            /// <param name="minW"></param>
            /// <param name="maxX"></param>
            /// <param name="maxY"></param>
            /// <param name="maxZ"></param>
            /// <param name="maxW"></param>
            [AutoGenerated(Category = "EXT_primitive_bounding_box", Version = "", EntryPoint = "glPrimitiveBoundingBoxEXT")]
            public static void PrimitiveBoundingBox(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Single v0) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Single v0) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPushGroupMarkerEXT")]
            public static void PushGroupMarker(Int32 length, string marker) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target">
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(Int32 id, OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target">
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(Int32 id, OpenTK.Graphics.ES30.QueryTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target">
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(UInt32 id, OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target">
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(UInt32 id, OpenTK.Graphics.ES30.QueryTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples]</summary>
            /// <param name="samples"></param>
            /// <param name="fixedsamplelocations"></param>
            [AutoGenerated(Category = "EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glRasterSamplesEXT")]
            [CLSCompliant(false)]
            public static void RasterSamples(Int32 samples, bool fixedsamplelocations) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples]</summary>
            /// <param name="samples"></param>
            /// <param name="fixedsamplelocations"></param>
            [AutoGenerated(Category = "EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glRasterSamplesEXT")]
            [CLSCompliant(false)]
            public static void RasterSamples(UInt32 samples, bool fixedsamplelocations) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="src"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glReadBufferIndexedEXT")]
            public static void ReadBufferIndexed(OpenTK.Graphics.ES30.All src, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="src"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glReadBufferIndexedEXT")]
            public static void ReadBufferIndexed(OpenTK.Graphics.ES30.ReadBufferMode src, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_win32_keyed_mutex]</summary>
            /// <param name="memory"></param>
            /// <param name="key"></param>
            [AutoGenerated(Category = "EXT_win32_keyed_mutex", Version = "", EntryPoint = "glReleaseKeyedMutexWin32EXT")]
            [CLSCompliant(false)]
            public static bool ReleaseKeyedMutexWin32(Int32 memory, Int64 key) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_win32_keyed_mutex]</summary>
            /// <param name="memory"></param>
            /// <param name="key"></param>
            [AutoGenerated(Category = "EXT_win32_keyed_mutex", Version = "", EntryPoint = "glReleaseKeyedMutexWin32EXT")]
            [CLSCompliant(false)]
            public static bool ReleaseKeyedMutexWin32(UInt32 memory, UInt64 key) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref UInt32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, ref Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.All pname, Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ref Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void SemaphoreParameter(Int32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, ref UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.All pname, UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, UInt64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ref UInt64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void SemaphoreParameter(UInt32 semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, UInt64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32[] buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All[] dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32[] buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref Int32 buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref Int32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.All dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref Int32 buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref Int32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32* buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All* dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void SignalSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32* buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32[] buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All[] dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32[] buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref UInt32 buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref UInt32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.All dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref UInt32 buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref UInt32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All* dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="dstLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void SignalSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* dstLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_sparse_texture]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="commit"></param>
            [AutoGenerated(Category = "EXT_sparse_texture", Version = "", EntryPoint = "glTexPageCommitmentEXT")]
            public static void TexPageCommitment(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool commit) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture2D, or TextureCubeMap.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture2D, or TextureCubeMap.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem1D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem1D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem1D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem1D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2DMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2DMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2DMultisample(OpenTK.Graphics.ES30.TextureTarget target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem2DMultisample(OpenTK.Graphics.ES30.TextureTarget target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3D(OpenTK.Graphics.ES30.TextureTarget target, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3DMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3DMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3DMultisample(OpenTK.Graphics.ES30.TextureTarget target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="target"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTexStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TexStorageMem3DMultisample(OpenTK.Graphics.ES30.TextureTarget target, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem1D(Int32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem1D(UInt32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem2D(Int32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem2D(UInt32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem2DMultisample(Int32 texture, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem2DMultisample(UInt32 texture, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem3D(Int32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="levels"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem3D(UInt32 texture, Int32 levels, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem3DMultisample(Int32 texture, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, Int32 memory, Int64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_memory_object]</summary>
            /// <param name="texture"></param>
            /// <param name="samples"></param>
            /// <param name="internalFormat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="fixedSampleLocations"></param>
            /// <param name="memory"></param>
            /// <param name="offset"></param>
            [AutoGenerated(Category = "EXT_memory_object", Version = "", EntryPoint = "glTextureStorageMem3DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void TextureStorageMem3DMultisample(UInt32 texture, Int32 samples, OpenTK.Graphics.ES30.All internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, UInt32 memory, UInt64 offset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 origtexture, OpenTK.Graphics.ES30.All internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES30.TextureTarget target, Int32 origtexture, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES30.All target, UInt32 origtexture, OpenTK.Graphics.ES30.All internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES30.TextureTarget target, UInt32 origtexture, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages">
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program">
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(Int32 pipeline, OpenTK.Graphics.ES30.All stages, Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages">
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program">
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(Int32 pipeline, OpenTK.Graphics.ES30.UseProgramStageMask stages, Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages">
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program">
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(UInt32 pipeline, OpenTK.Graphics.ES30.All stages, UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages">
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program">
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(UInt32 pipeline, OpenTK.Graphics.ES30.UseProgramStageMask stages, UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES30.All type, Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES30.All type, UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(Int32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(UInt32 pipeline) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32[] buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All[] srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32[] buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref Int32 buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref Int32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.All srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref Int32 buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref Int32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32* buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All* srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void WaitSemaphore(Int32 semaphore, Int32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] Int32* buffers, Int32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] Int32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32[] buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All[] srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32[] buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref UInt32 buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref UInt32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.All srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref UInt32 buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref UInt32 textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.All* srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_semaphore]</summary>
            /// <param name="semaphore"></param>
            /// <param name="numBufferBarriers"></param>
            /// <param name="buffers">[length: COMPSIZE(numBufferBarriers)]</param>
            /// <param name="numTextureBarriers"></param>
            /// <param name="textures">[length: COMPSIZE(numTextureBarriers)]</param>
            /// <param name="srcLayouts">[length: COMPSIZE(numTextureBarriers)]</param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            [CLSCompliant(false)]
            public static unsafe void WaitSemaphore(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* srcLayouts) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_window_rectangles]</summary>
            /// <param name="mode"></param>
            /// <param name="count"></param>
            /// <param name="box">[length: COMPSIZE(count)]</param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            [CLSCompliant(false)]
            public static void WindowRectangles(OpenTK.Graphics.ES30.All mode, Int32 count, [CountAttribute(Computed = "count")] Int32[] box) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_window_rectangles]</summary>
            /// <param name="mode"></param>
            /// <param name="count"></param>
            /// <param name="box">[length: COMPSIZE(count)]</param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            [CLSCompliant(false)]
            public static void WindowRectangles(OpenTK.Graphics.ES30.All mode, Int32 count, [CountAttribute(Computed = "count")] ref Int32 box) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: EXT_window_rectangles]</summary>
            /// <param name="mode"></param>
            /// <param name="count"></param>
            /// <param name="box">[length: COMPSIZE(count)]</param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            [CLSCompliant(false)]
            public static unsafe void WindowRectangles(OpenTK.Graphics.ES30.All mode, Int32 count, [CountAttribute(Computed = "count")] Int32* box) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Img
        {
            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTexture2DDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DDownsample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTexture2DDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DDownsample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTexture2DDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DDownsample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, Int32 texture, Int32 level, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTexture2DDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DDownsample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, Int32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, UInt32 texture, Int32 level, Int32 samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layer"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTextureLayerDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTextureLayerDownsample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layer"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTextureLayerDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTextureLayerDownsample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layer"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTextureLayerDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTextureLayerDownsample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_framebuffer_downsample]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layer"></param>
            /// <param name="xscale"></param>
            /// <param name="yscale"></param>
            [AutoGenerated(Category = "IMG_framebuffer_downsample", Version = "", EntryPoint = "glFramebufferTextureLayerDownsampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTextureLayerDownsample(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="texture"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleIMG")]
            [CLSCompliant(false)]
            public static Int64 GetTextureHandle(Int32 texture) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="texture"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleIMG")]
            [CLSCompliant(false)]
            public static Int64 GetTextureHandle(UInt32 texture) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="sampler"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleIMG")]
            [CLSCompliant(false)]
            public static Int64 GetTextureSamplerHandle(Int32 texture, Int32 sampler) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="sampler"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleIMG")]
            [CLSCompliant(false)]
            public static Int64 GetTextureSamplerHandle(UInt32 texture, UInt32 sampler) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64IMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64IMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt64 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64IMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64IMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static unsafe void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: IMG_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "IMG_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vIMG")]
            [CLSCompliant(false)]
            public static unsafe void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Intel
        {
            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glBeginPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void BeginPerfQuery(Int32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glBeginPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void BeginPerfQuery(UInt32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32[] queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] out Int32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32* queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32[] queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] out UInt32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32* queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glDeletePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void DeletePerfQuery(Int32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glDeletePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void DeletePerfQuery(UInt32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glEndPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void EndPerfQuery(Int32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glEndPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void EndPerfQuery(UInt32 queryHandle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] Int32[] queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out Int32 queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] Int32* queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] UInt32[] queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out UInt32 queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] UInt32* queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32[] nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] out Int32 nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32* nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32[] nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] out UInt32 nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32* nextQueryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, Int32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] Int32[] counterOffset, [OutAttribute] Int32[] counterDataSize, [OutAttribute] Int32[] counterTypeEnum, [OutAttribute] Int32[] counterDataTypeEnum, [OutAttribute] Int64[] rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, Int32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] out Int32 counterOffset, [OutAttribute] out Int32 counterDataSize, [OutAttribute] out Int32 counterTypeEnum, [OutAttribute] out Int32 counterDataTypeEnum, [OutAttribute] out Int64 rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, Int32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] Int32* counterOffset, [OutAttribute] Int32* counterDataSize, [OutAttribute] Int32* counterTypeEnum, [OutAttribute] Int32* counterDataTypeEnum, [OutAttribute] Int64* rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, UInt32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] UInt32[] counterOffset, [OutAttribute] UInt32[] counterDataSize, [OutAttribute] UInt32[] counterTypeEnum, [OutAttribute] UInt32[] counterDataTypeEnum, [OutAttribute] UInt64[] rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, UInt32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] out UInt32 counterOffset, [OutAttribute] out UInt32 counterDataSize, [OutAttribute] out UInt32 counterTypeEnum, [OutAttribute] out UInt32 counterDataTypeEnum, [OutAttribute] out UInt64 rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName">[length: counterNameLength]</param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc">[length: counterDescLength]</param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, UInt32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] Int32* bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr[] data, [OutAttribute] Int32[] bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr[] data, [OutAttribute] UInt32[] bytesWritten) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName(string queryName, [OutAttribute] Int32[] queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName(string queryName, [OutAttribute] out Int32 queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName(string queryName, [OutAttribute] Int32* queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName(string queryName, [OutAttribute] UInt32[] queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName(string queryName, [OutAttribute] out UInt32 queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName(string queryName, [OutAttribute] UInt32* queryId) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] Int32[] dataSize, [OutAttribute] Int32[] noCounters, [OutAttribute] Int32[] noInstances, [OutAttribute] Int32[] capsMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] out Int32 dataSize, [OutAttribute] out Int32 noCounters, [OutAttribute] out Int32 noInstances, [OutAttribute] out Int32 capsMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] Int32* dataSize, [OutAttribute] Int32* noCounters, [OutAttribute] Int32* noInstances, [OutAttribute] Int32* capsMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] UInt32[] dataSize, [OutAttribute] UInt32[] noCounters, [OutAttribute] UInt32[] noInstances, [OutAttribute] UInt32[] capsMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] out UInt32 dataSize, [OutAttribute] out UInt32 noCounters, [OutAttribute] out UInt32 noInstances, [OutAttribute] out UInt32 capsMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName">[length: queryNameLength]</param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Khr
        {
            /// <summary>[requires: KHR_blend_equation_advanced]</summary>
            [AutoGenerated(Category = "KHR_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierKHR")]
            public static void BlendBarrier() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr[] userParam) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref Int32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref UInt32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, Int32 id, OpenTK.Graphics.ES30.All severity, Int32 length, string buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, UInt32 id, OpenTK.Graphics.ES30.All severity, Int32 length, string buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, Int32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, string buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, UInt32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, string buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All types, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* types, [OutAttribute, CountAttribute(Parameter = "count")] Int32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] Int32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All types, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusKHR")]
            public static OpenTK.Graphics.ES30.GraphicsResetStatus GetGraphicsResetStatus() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_parallel_shader_compile]</summary>
            /// <param name="count"></param>
            [AutoGenerated(Category = "KHR_parallel_shader_compile", Version = "", EntryPoint = "glMaxShaderCompilerThreadsKHR")]
            [CLSCompliant(false)]
            public static void MaxShaderCompilerThreads(Int32 count) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_parallel_shader_compile]</summary>
            /// <param name="count"></param>
            [AutoGenerated(Category = "KHR_parallel_shader_compile", Version = "", EntryPoint = "glMaxShaderCompilerThreadsKHR")]
            [CLSCompliant(false)]
            public static void MaxShaderCompilerThreads(UInt32 count) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr ptr, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr[] ptr, Int32 length, string label) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static void PopDebugGroup() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, Int32 id, Int32 length, string message) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, UInt32 id, Int32 length, string message) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.DebugSource source, Int32 id, Int32 length, string message) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.DebugSource source, UInt32 id, Int32 length, string message) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class NV
        {
            /// <summary>[requires: NV_conditional_render]
            /// Start conditional rendering
            /// </summary>
            /// <param name="id">
            /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
            /// </param>
            /// <param name="mode">
            /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            [CLSCompliant(false)]
            public static void BeginConditionalRender(Int32 id, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conditional_render]
            /// Start conditional rendering
            /// </summary>
            /// <param name="id">
            /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
            /// </param>
            /// <param name="mode">
            /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
            /// </param>
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            [CLSCompliant(false)]
            public static void BeginConditionalRender(Int32 id, OpenTK.Graphics.ES30.TypeEnum mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conditional_render]
            /// Start conditional rendering
            /// </summary>
            /// <param name="id">
            /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
            /// </param>
            /// <param name="mode">
            /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            [CLSCompliant(false)]
            public static void BeginConditionalRender(UInt32 id, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conditional_render]
            /// Start conditional rendering
            /// </summary>
            /// <param name="id">
            /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
            /// </param>
            /// <param name="mode">
            /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
            /// </param>
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            [CLSCompliant(false)]
            public static void BeginConditionalRender(UInt32 id, OpenTK.Graphics.ES30.TypeEnum mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierNV")]
            public static void BlendBarrier() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendParameteriNV")]
            public static void BlendParameter(OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask">
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter">
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferNV")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1">
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1">
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask">
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter">
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferNV")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conservative_raster_pre_snap_triangles]</summary>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            [AutoGenerated(Category = "NV_conservative_raster_pre_snap_triangles", Version = "", EntryPoint = "glConservativeRasterParameteriNV")]
            public static void ConservativeRasterParameter(OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget">
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget">
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset">
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset">
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size">
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_copy_buffer", Version = "", EntryPoint = "glCopyBufferSubDataNV")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES30.All readTarget, OpenTK.Graphics.ES30.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget">
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget">
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset">
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset">
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size">
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            [AutoGenerated(Category = "NV_copy_buffer", Version = "", EntryPoint = "glCopyBufferSubDataNV")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES30.BufferTarget readTarget, OpenTK.Graphics.ES30.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCopyPathNV")]
            [CLSCompliant(false)]
            public static void CopyPath(Int32 resultPath, Int32 srcPath) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCopyPathNV")]
            [CLSCompliant(false)]
            public static void CopyPath(UInt32 resultPath, UInt32 srcPath) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageMaskNV")]
            public static void CoverageMask(bool mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="components"></param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationNV")]
            public static void CoverageModulation(OpenTK.Graphics.ES30.All components) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="n"></param>
            /// <param name="v">[length: n]</param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static void CoverageModulationTable(Int32 n, [CountAttribute(Parameter = "n")] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="n"></param>
            /// <param name="v">[length: n]</param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static void CoverageModulationTable(Int32 n, [CountAttribute(Parameter = "n")] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="n"></param>
            /// <param name="v">[length: n]</param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverageModulationTable(Int32 n, [CountAttribute(Parameter = "n")] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="operation"></param>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageOperationNV")]
            public static void CoverageOperation(OpenTK.Graphics.ES30.All operation) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void CoverFillPath(Int32 path, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void CoverFillPath(Int32 path, OpenTK.Graphics.ES30.PathCoverMode coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void CoverFillPath(UInt32 path, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void CoverFillPath(UInt32 path, OpenTK.Graphics.ES30.PathCoverMode coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathCoverMode coverMode, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePath(Int32 path, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePath(Int32 path, OpenTK.Graphics.ES30.PathCoverMode coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePath(UInt32 path, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void CoverStrokePath(UInt32 path, OpenTK.Graphics.ES30.PathCoverMode coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] Int32[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] Int32* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, [CountAttribute(Parameter = "n")] UInt32* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="range"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glDeletePathsNV")]
            [CLSCompliant(false)]
            public static void DeletePath(Int32 path, Int32 range) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="range"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glDeletePathsNV")]
            [CLSCompliant(false)]
            public static void DeletePath(UInt32 path, Int32 range) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(Int32 first, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(Int32 first, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static unsafe void DepthRangeArray(Int32 first, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(UInt32 first, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(UInt32 first, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            [CLSCompliant(false)]
            public static unsafe void DepthRangeArray(UInt32 first, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose depth range to update.
            /// </param>
            /// <param name="n">
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f">
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeIndexedfNV")]
            [CLSCompliant(false)]
            public static void DepthRangeIndexed(Int32 index, Single n, Single f) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose depth range to update.
            /// </param>
            /// <param name="n">
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f">
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeIndexedfNV")]
            [CLSCompliant(false)]
            public static void DepthRangeIndexed(UInt32 index, Single n, Single f) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDisableiNV")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDisableiNV")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDisableiNV")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDisableiNV")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedNV")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedNV")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All[] bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.All bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.All* bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n]
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkImage"></param>
            /// <param name="sampler"></param>
            /// <param name="x0"></param>
            /// <param name="y0"></param>
            /// <param name="x1"></param>
            /// <param name="y1"></param>
            /// <param name="z"></param>
            /// <param name="s0"></param>
            /// <param name="t0"></param>
            /// <param name="s1"></param>
            /// <param name="t1"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glDrawVkImageNV")]
            [CLSCompliant(false)]
            public static void DrawVkImage(Int64 vkImage, Int32 sampler, Single x0, Single y0, Single x1, Single y1, Single z, Single s0, Single t0, Single s1, Single t1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkImage"></param>
            /// <param name="sampler"></param>
            /// <param name="x0"></param>
            /// <param name="y0"></param>
            /// <param name="x1"></param>
            /// <param name="y1"></param>
            /// <param name="z"></param>
            /// <param name="s0"></param>
            /// <param name="t0"></param>
            /// <param name="s1"></param>
            /// <param name="t1"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glDrawVkImageNV")]
            [CLSCompliant(false)]
            public static void DrawVkImage(UInt64 vkImage, UInt32 sampler, Single x0, Single y0, Single x1, Single y1, Single z, Single s0, Single t0, Single s1, Single t1) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glEnableiNV")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glEnableiNV")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glEnableiNV")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glEnableiNV")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conditional_render]</summary>
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glEndConditionalRenderNV")]
            public static void EndConditionalRender() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(Int32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(UInt32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fragment_coverage_to_color]</summary>
            /// <param name="color"></param>
            [AutoGenerated(Category = "NV_fragment_coverage_to_color", Version = "", EntryPoint = "glFragmentCoverageColorNV")]
            [CLSCompliant(false)]
            public static void FragmentCoverageColor(Int32 color) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fragment_coverage_to_color]</summary>
            /// <param name="color"></param>
            [AutoGenerated(Category = "NV_fragment_coverage_to_color", Version = "", EntryPoint = "glFragmentCoverageColorNV")]
            [CLSCompliant(false)]
            public static void FragmentCoverageColor(UInt32 color) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, Int32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, Int32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, Int32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, UInt32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, UInt32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.ES30.All target, UInt32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, UInt32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, UInt32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="target"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.ES30.FramebufferTarget target, UInt32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="range"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGenPathsNV")]
            public static Int32 GenPath(Int32 range) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="bufsize"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static void GetCoverageModulationTable(Int32 bufsize, [OutAttribute] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="bufsize"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static void GetCoverageModulationTable(Int32 bufsize, [OutAttribute] out Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_mixed_samples]</summary>
            /// <param name="bufsize"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            [CLSCompliant(false)]
            public static unsafe void GetCoverageModulationTable(Int32 bufsize, [OutAttribute] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layered"></param>
            /// <param name="layer"></param>
            /// <param name="format"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetImageHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetImageHandle(Int32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.ES30.All format) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layered"></param>
            /// <param name="layer"></param>
            /// <param name="format"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetImageHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetImageHandle(Int32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.ES30.PixelFormat format) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layered"></param>
            /// <param name="layer"></param>
            /// <param name="format"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetImageHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetImageHandle(UInt32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.ES30.All format) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="layered"></param>
            /// <param name="layer"></param>
            /// <param name="format"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetImageHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetImageHandle(UInt32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.ES30.PixelFormat format) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static void GetInternalformatSample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 samples, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static void GetInternalformatSample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 samples, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetInternalformatSample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 samples, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static void GetInternalformatSample(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 samples, OpenTK.Graphics.ES30.InternalFormatPName pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static void GetInternalformatSample(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 samples, OpenTK.Graphics.ES30.InternalFormatPName pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_internalformat_sample_query]</summary>
            /// <param name="target"></param>
            /// <param name="internalformat"></param>
            /// <param name="samples"></param>
            /// <param name="pname"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetInternalformatSample(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 samples, OpenTK.Graphics.ES30.InternalFormatPName pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static void GetPathCommands(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte[] commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static void GetPathCommands(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] out Byte commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathCommands(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static void GetPathCommands(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte[] commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static void GetPathCommands(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] out Byte commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commands">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathCommands(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static void GetPathCoords(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Single[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static void GetPathCoords(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] out Single coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathCoords(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static void GetPathCoords(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static void GetPathCoords(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] out Single coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coords">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathCoords(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void GetPathDashArray(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Single[] dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void GetPathDashArray(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] out Single dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathDashArray(Int32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void GetPathDashArray(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single[] dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void GetPathDashArray(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] out Single dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashArray">[length: COMPSIZE(path)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathDashArray(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathLengthNV")]
            [CLSCompliant(false)]
            public static Single GetPathLength(Int32 path, Int32 startSegment, Int32 numSegments) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathLengthNV")]
            [CLSCompliant(false)]
            public static Single GetPathLength(UInt32 path, Int32 startSegment, Int32 numSegments) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out Single metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out Single metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetricRange(OpenTK.Graphics.ES30.All metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out Single metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out Single metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="firstPathName"></param>
            /// <param name="numPaths"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetricRange(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetric(OpenTK.Graphics.ES30.All metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetric(OpenTK.Graphics.ES30.All metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static void GetPathMetric(OpenTK.Graphics.ES30.All metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static void GetPathMetric(OpenTK.Graphics.ES30.All metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetric(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathMetric(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static void GetPathMetric(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="metricQueryMask"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="stride"></param>
            /// <param name="metrics">[length: COMPSIZE(metricQueryMask,numPaths,stride)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            [CLSCompliant(false)]
            public static void GetPathMetric(OpenTK.Graphics.ES30.PathMetricMask metricQueryMask, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single[] metrics) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: 4]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathSpacing(OpenTK.Graphics.ES30.All pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.All transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathSpacing(OpenTK.Graphics.ES30.All pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.All transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static void GetPathSpacing(OpenTK.Graphics.ES30.All pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.All transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single[] returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static void GetPathSpacing(OpenTK.Graphics.ES30.All pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.All transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single[] returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathSpacing(OpenTK.Graphics.ES30.PathListMode pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathSpacing(OpenTK.Graphics.ES30.PathListMode pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static void GetPathSpacing(OpenTK.Graphics.ES30.PathListMode pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single[] returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="pathListMode"></param>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="advanceScale"></param>
            /// <param name="kerningScale"></param>
            /// <param name="transformType"></param>
            /// <param name="returnedSpacing">[length: COMPSIZE(pathListMode,numPaths)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            [CLSCompliant(false)]
            public static void GetPathSpacing(OpenTK.Graphics.ES30.PathListMode pathListMode, Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Single advanceScale, Single kerningScale, OpenTK.Graphics.ES30.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single[] returnedSpacing) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.ES30.TextureUnit texCoordSet, OpenTK.Graphics.ES30.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.All programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.ES30.All[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.All programInterface, Int32 index, Int32 propCount, ref OpenTK.Graphics.ES30.All props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.All programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.ES30.All* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.ES30.All[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, Int32 index, Int32 propCount, ref OpenTK.Graphics.ES30.All props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramResource(Int32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.ES30.All* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.All programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.ES30.All[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.All programInterface, UInt32 index, Int32 propCount, ref OpenTK.Graphics.ES30.All props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.All programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.ES30.All* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.ES30.All[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Single[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, UInt32 index, Int32 propCount, ref OpenTK.Graphics.ES30.All props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Single @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramResource(UInt32 program, OpenTK.Graphics.ES30.ProgramInterface programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.ES30.All* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetTextureHandle(Int32 texture) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetTextureHandle(UInt32 texture) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="sampler"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetTextureSamplerHandle(Int32 texture, Int32 sampler) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="texture"></param>
            /// <param name="sampler"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleNV")]
            [CLSCompliant(false)]
            public static Int64 GetTextureSamplerHandle(UInt32 texture, UInt32 sampler) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int64 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">[length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            [CLSCompliant(false)]
            public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="name">[length: COMPSIZE(name)]</param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glGetVkProcAddrNV")]
            public static IntPtr GetVkProcAddr([CountAttribute(Computed = "name")] string name) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="pathA"></param>
            /// <param name="pathB"></param>
            /// <param name="weight"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glInterpolatePathsNV")]
            [CLSCompliant(false)]
            public static void InterpolatePath(Int32 resultPath, Int32 pathA, Int32 pathB, Single weight) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="pathA"></param>
            /// <param name="pathB"></param>
            /// <param name="weight"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glInterpolatePathsNV")]
            [CLSCompliant(false)]
            public static void InterpolatePath(UInt32 resultPath, UInt32 pathA, UInt32 pathB, Single weight) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glIsEnablediNV")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glIsEnablediNV")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glIsEnablediNV")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glIsEnablediNV")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(Int32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(UInt32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentNV")]
            [CLSCompliant(false)]
            public static bool IsImageHandleResident(Int64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentNV")]
            [CLSCompliant(false)]
            public static bool IsImageHandleResident(UInt64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPathNV")]
            [CLSCompliant(false)]
            public static bool IsPath(Int32 path) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPathNV")]
            [CLSCompliant(false)]
            public static bool IsPath(UInt32 path) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="mask"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInFillPathNV")]
            [CLSCompliant(false)]
            public static bool IsPointInFillPath(Int32 path, Int32 mask, Single x, Single y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="mask"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInFillPathNV")]
            [CLSCompliant(false)]
            public static bool IsPointInFillPath(UInt32 path, UInt32 mask, Single x, Single y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInStrokePathNV")]
            [CLSCompliant(false)]
            public static bool IsPointInStrokePath(Int32 path, Single x, Single y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInStrokePathNV")]
            [CLSCompliant(false)]
            public static bool IsPointInStrokePath(UInt32 path, Single x, Single y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentNV")]
            [CLSCompliant(false)]
            public static bool IsTextureHandleResident(Int64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentNV")]
            [CLSCompliant(false)]
            public static bool IsTextureHandleResident(UInt64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentNV")]
            [CLSCompliant(false)]
            public static void MakeImageHandleNonResident(Int64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentNV")]
            [CLSCompliant(false)]
            public static void MakeImageHandleNonResident(UInt64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            /// <param name="access"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentNV")]
            [CLSCompliant(false)]
            public static void MakeImageHandleResident(Int64 handle, OpenTK.Graphics.ES30.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            /// <param name="access"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentNV")]
            [CLSCompliant(false)]
            public static void MakeImageHandleResident(UInt64 handle, OpenTK.Graphics.ES30.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentNV")]
            [CLSCompliant(false)]
            public static void MakeTextureHandleNonResident(Int64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentNV")]
            [CLSCompliant(false)]
            public static void MakeTextureHandleNonResident(UInt64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentNV")]
            [CLSCompliant(false)]
            public static void MakeTextureHandleResident(Int64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="handle"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentNV")]
            [CLSCompliant(false)]
            public static void MakeTextureHandleResident(UInt64 handle) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoad3x2(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoad3x2(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad3x2(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoad3x3(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoad3x3(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoad3x3(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixLoadTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixLoadTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            [CLSCompliant(false)]
            public static void MatrixMult3x2(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            [CLSCompliant(false)]
            public static void MatrixMult3x2(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult3x2(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixMult3x3(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixMult3x3(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMult3x3(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, Single[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static void MatrixMultTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, ref Single m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="matrixMode"></param>
            /// <param name="m"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            [CLSCompliant(false)]
            public static unsafe void MatrixMultTranspose3x3(OpenTK.Graphics.ES30.All matrixMode, Single* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void NamedFramebufferSampleLocations(Int32 framebuffer, Int32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void NamedFramebufferSampleLocations(Int32 framebuffer, Int32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void NamedFramebufferSampleLocations(Int32 framebuffer, Int32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void NamedFramebufferSampleLocations(UInt32 framebuffer, UInt32 start, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static void NamedFramebufferSampleLocations(UInt32 framebuffer, UInt32 start, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="start"></param>
            /// <param name="count"></param>
            /// <param name="v"></param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            [CLSCompliant(false)]
            public static unsafe void NamedFramebufferSampleLocations(UInt32 framebuffer, UInt32 start, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static void PathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static void PathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static unsafe void PathColorGen(OpenTK.Graphics.ES30.All color, OpenTK.Graphics.ES30.All genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static void PathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static void PathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="color"></param>
            /// <param name="genMode"></param>
            /// <param name="colorFormat"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,colorFormat)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            [CLSCompliant(false)]
            public static unsafe void PathColorGen(OpenTK.Graphics.ES30.PathColor color, OpenTK.Graphics.ES30.PathGenMode genMode, OpenTK.Graphics.ES30.All colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            [CLSCompliant(false)]
            public static void PathCommands(Int32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void PathCommands(Int32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            [CLSCompliant(false)]
            public static void PathCommands(UInt32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void PathCommands(UInt32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            [CLSCompliant(false)]
            public static void PathCoords(Int32 path, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            [CLSCompliant(false)]
            public static void PathCoords(Int32 path, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            [CLSCompliant(false)]
            public static void PathCoords(UInt32 path, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            [CLSCompliant(false)]
            public static void PathCoords(UInt32 path, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoverDepthFuncNV")]
            public static void PathCoverDepthFunc(OpenTK.Graphics.ES30.All func) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoverDepthFuncNV")]
            public static void PathCoverDepthFunc(OpenTK.Graphics.ES30.DepthFunction func) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void PathDashArray(Int32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single[] dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void PathDashArray(Int32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] ref Single dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static unsafe void PathDashArray(Int32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single* dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void PathDashArray(UInt32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single[] dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static void PathDashArray(UInt32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] ref Single dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="dashCount"></param>
            /// <param name="dashArray">[length: dashCount]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            [CLSCompliant(false)]
            public static unsafe void PathDashArray(UInt32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single* dashArray) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="genMode"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathFogGenNV")]
            public static void PathFogGen(OpenTK.Graphics.ES30.All genMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="genMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathFogGenNV")]
            public static void PathFogGen(OpenTK.Graphics.ES30.PathGenMode genMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 pathParameterTemplate, Single emScale, Int32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 pathParameterTemplate, Single emScale, Int32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 pathParameterTemplate, Single emScale, Int32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 pathParameterTemplate, Single emScale, Int32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="fontTarget"></param>
            /// <param name="fontName"></param>
            /// <param name="fontStyle"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            /// <param name="baseAndCount"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathGlyphIndexRange(OpenTK.Graphics.ES30.All fontTarget, IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.All handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.All handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(Int32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(Int32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.All handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, UInt32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.All handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(UInt32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="firstGlyph"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            [CLSCompliant(false)]
            public static void PathGlyphRange(UInt32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, UInt32 firstGlyph, Int32 numGlyphs, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.ES30.All handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr[] charcodes, OpenTK.Graphics.ES30.All handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(Int32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(Int32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr[] charcodes, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.ES30.All handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.All fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr[] charcodes, OpenTK.Graphics.ES30.All handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(UInt32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontName">[length: COMPSIZE(fontTarget,fontName)]</param>
            /// <param name="fontStyle"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="type"></param>
            /// <param name="charcodes">[length: COMPSIZE(numGlyphs,type,charcodes)]</param>
            /// <param name="handleMissingGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            [CLSCompliant(false)]
            public static void PathGlyph(UInt32 firstPathName, OpenTK.Graphics.ES30.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr[] fontName, OpenTK.Graphics.ES30.PathFontStyle fontStyle, Int32 numGlyphs, OpenTK.Graphics.ES30.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr[] charcodes, OpenTK.Graphics.ES30.PathHandleMissingGlyphs handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontSize"></param>
            /// <param name="fontData"></param>
            /// <param name="faceIndex"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathMemoryGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontSize, IntPtr fontData, Int32 faceIndex, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontSize"></param>
            /// <param name="fontData"></param>
            /// <param name="faceIndex"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathMemoryGlyphIndexArray(Int32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontSize, IntPtr[] fontData, Int32 faceIndex, Int32 firstGlyphIndex, Int32 numGlyphs, Int32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontSize"></param>
            /// <param name="fontData"></param>
            /// <param name="faceIndex"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathMemoryGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontSize, IntPtr fontData, Int32 faceIndex, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="firstPathName"></param>
            /// <param name="fontTarget"></param>
            /// <param name="fontSize"></param>
            /// <param name="fontData"></param>
            /// <param name="faceIndex"></param>
            /// <param name="firstGlyphIndex"></param>
            /// <param name="numGlyphs"></param>
            /// <param name="pathParameterTemplate"></param>
            /// <param name="emScale"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.All PathMemoryGlyphIndexArray(UInt32 firstPathName, OpenTK.Graphics.ES30.All fontTarget, IntPtr fontSize, IntPtr[] fontData, Int32 faceIndex, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameteriNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameteriNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameteriNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameteriNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(Int32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(Int32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(UInt32 path, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Int32[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="pname"></param>
            /// <param name="value">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            [CLSCompliant(false)]
            public static unsafe void PathParameter(UInt32 path, OpenTK.Graphics.ES30.PathParameter pname, [CountAttribute(Computed = "pname")] Int32* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="factor"></param>
            /// <param name="units"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilDepthOffsetNV")]
            public static void PathStencilDepthOffset(Single factor, Single units) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            /// <param name="@ref"></param>
            /// <param name="mask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilFuncNV")]
            [CLSCompliant(false)]
            public static void PathStencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            /// <param name="@ref"></param>
            /// <param name="mask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilFuncNV")]
            [CLSCompliant(false)]
            public static void PathStencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            /// <param name="@ref"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilFuncNV")]
            [CLSCompliant(false)]
            public static void PathStencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, Int32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="func"></param>
            /// <param name="@ref"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilFuncNV")]
            [CLSCompliant(false)]
            public static void PathStencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, UInt32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(Int32 path, OpenTK.Graphics.ES30.All format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(Int32 path, OpenTK.Graphics.ES30.All format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr[] pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(Int32 path, OpenTK.Graphics.ES30.PathStringFormat format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(Int32 path, OpenTK.Graphics.ES30.PathStringFormat format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr[] pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(UInt32 path, OpenTK.Graphics.ES30.All format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(UInt32 path, OpenTK.Graphics.ES30.All format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr[] pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(UInt32 path, OpenTK.Graphics.ES30.PathStringFormat format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="format"></param>
            /// <param name="length"></param>
            /// <param name="pathString">[length: length]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            [CLSCompliant(false)]
            public static void PathString(UInt32 path, OpenTK.Graphics.ES30.PathStringFormat format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr[] pathString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commandStart"></param>
            /// <param name="commandsToDelete"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            [CLSCompliant(false)]
            public static void PathSubCommands(Int32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commandStart"></param>
            /// <param name="commandsToDelete"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void PathSubCommands(Int32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commandStart"></param>
            /// <param name="commandsToDelete"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            [CLSCompliant(false)]
            public static void PathSubCommands(UInt32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="commandStart"></param>
            /// <param name="commandsToDelete"></param>
            /// <param name="numCommands"></param>
            /// <param name="commands">[length: numCommands]</param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            [CLSCompliant(false)]
            public static unsafe void PathSubCommands(UInt32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coordStart"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            [CLSCompliant(false)]
            public static void PathSubCoords(Int32 path, Int32 coordStart, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coordStart"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            [CLSCompliant(false)]
            public static void PathSubCoords(Int32 path, Int32 coordStart, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coordStart"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            [CLSCompliant(false)]
            public static void PathSubCoords(UInt32 path, Int32 coordStart, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="coordStart"></param>
            /// <param name="numCoords"></param>
            /// <param name="coordType"></param>
            /// <param name="coords">[length: COMPSIZE(numCoords,coordType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            [CLSCompliant(false)]
            public static void PathSubCoords(UInt32 path, Int32 coordStart, Int32 numCoords, OpenTK.Graphics.ES30.All coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static void PathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static void PathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static unsafe void PathTexGen(OpenTK.Graphics.ES30.All texCoordSet, OpenTK.Graphics.ES30.All genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static void PathTexGen(OpenTK.Graphics.ES30.PathColor texCoordSet, OpenTK.Graphics.ES30.PathGenMode genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static void PathTexGen(OpenTK.Graphics.ES30.PathColor texCoordSet, OpenTK.Graphics.ES30.PathGenMode genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="texCoordSet"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs">[length: COMPSIZE(genMode,components)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            [CLSCompliant(false)]
            public static unsafe void PathTexGen(OpenTK.Graphics.ES30.PathColor texCoordSet, OpenTK.Graphics.ES30.PathGenMode genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            /// <param name="distance"></param>
            /// <param name="x">[length: 1]</param>
            /// <param name="y">[length: 1]</param>
            /// <param name="tangentX">[length: 1]</param>
            /// <param name="tangentY">[length: 1]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            [CLSCompliant(false)]
            public static bool PointAlongPath(Int32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] out Single x, [OutAttribute, CountAttribute(Count = 1)] out Single y, [OutAttribute, CountAttribute(Count = 1)] out Single tangentX, [OutAttribute, CountAttribute(Count = 1)] out Single tangentY) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            /// <param name="distance"></param>
            /// <param name="x">[length: 1]</param>
            /// <param name="y">[length: 1]</param>
            /// <param name="tangentX">[length: 1]</param>
            /// <param name="tangentY">[length: 1]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            [CLSCompliant(false)]
            public static unsafe bool PointAlongPath(Int32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] Single* x, [OutAttribute, CountAttribute(Count = 1)] Single* y, [OutAttribute, CountAttribute(Count = 1)] Single* tangentX, [OutAttribute, CountAttribute(Count = 1)] Single* tangentY) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            /// <param name="distance"></param>
            /// <param name="x">[length: 1]</param>
            /// <param name="y">[length: 1]</param>
            /// <param name="tangentX">[length: 1]</param>
            /// <param name="tangentY">[length: 1]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            [CLSCompliant(false)]
            public static bool PointAlongPath(UInt32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] out Single x, [OutAttribute, CountAttribute(Count = 1)] out Single y, [OutAttribute, CountAttribute(Count = 1)] out Single tangentX, [OutAttribute, CountAttribute(Count = 1)] out Single tangentY) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="startSegment"></param>
            /// <param name="numSegments"></param>
            /// <param name="distance"></param>
            /// <param name="x">[length: 1]</param>
            /// <param name="y">[length: 1]</param>
            /// <param name="tangentX">[length: 1]</param>
            /// <param name="tangentY">[length: 1]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            [CLSCompliant(false)]
            public static unsafe bool PointAlongPath(UInt32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] Single* x, [OutAttribute, CountAttribute(Count = 1)] Single* y, [OutAttribute, CountAttribute(Count = 1)] Single* tangentX, [OutAttribute, CountAttribute(Count = 1)] Single* tangentY) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_polygon_mode]
            /// Select a polygon rasterization mode
            /// </summary>
            /// <param name="face">
            /// Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.
            /// </param>
            /// <param name="mode">
            /// Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_polygon_mode", Version = "", EntryPoint = "glPolygonModeNV")]
            public static void PolygonMode(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_polygon_mode]
            /// Select a polygon rasterization mode
            /// </summary>
            /// <param name="face">
            /// Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.
            /// </param>
            /// <param name="mode">
            /// Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.
            /// </param>
            [AutoGenerated(Category = "NV_polygon_mode", Version = "", EntryPoint = "glPolygonModeNV")]
            public static void PolygonMode(OpenTK.Graphics.ES30.MaterialFace face, OpenTK.Graphics.ES30.PolygonMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static void ProgramPathFragmentInputGen(Int32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static void ProgramPathFragmentInputGen(Int32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramPathFragmentInputGen(Int32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static void ProgramPathFragmentInputGen(UInt32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, Single[] coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static void ProgramPathFragmentInputGen(UInt32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, ref Single coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="genMode"></param>
            /// <param name="components"></param>
            /// <param name="coeffs"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramPathFragmentInputGen(UInt32 program, Int32 location, OpenTK.Graphics.ES30.All genMode, Int32 components, Single* coeffs) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int64 x) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int64 x) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, UInt64 x) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int64 x, Int64 y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int64 x, Int64 y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, UInt64 x, UInt64 y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int64 x, Int64 y, Int64 z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64NV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt64 values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="values">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_read_buffer]
            /// Select a color buffer source for pixels
            /// </summary>
            /// <param name="mode">
            /// Specifies a color buffer. Accepted values are Back, None, and ColorAttachmenti.
            /// </param>
            [AutoGenerated(Category = "NV_read_buffer", Version = "", EntryPoint = "glReadBufferNV")]
            public static void ReadBuffer(OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleNV")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleNV")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_sample_locations]</summary>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glResolveDepthValuesNV")]
            public static void ResolveDepthValues() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static unsafe void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            [CLSCompliant(false)]
            public static unsafe void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="left">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="bottom">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="width">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            /// <param name="height">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="left">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="bottom">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="width">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            /// <param name="height">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static unsafe void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            [CLSCompliant(false)]
            public static unsafe void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(Int32 fence, OpenTK.Graphics.ES30.All condition) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(UInt32 fence, OpenTK.Graphics.ES30.All condition) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkFence"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkFenceNV")]
            [CLSCompliant(false)]
            public static void SignalVkFence(Int64 vkFence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkFence"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkFenceNV")]
            [CLSCompliant(false)]
            public static void SignalVkFence(UInt64 vkFence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkSemaphore"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkSemaphoreNV")]
            [CLSCompliant(false)]
            public static void SignalVkSemaphore(Int64 vkSemaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkSemaphore"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkSemaphoreNV")]
            [CLSCompliant(false)]
            public static void SignalVkSemaphore(UInt64 vkSemaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.All fillMode, Int32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.All fillMode, UInt32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.All fillMode, Int32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.All fillMode, UInt32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.PathFillMode fillMode, Int32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathFillMode fillMode, UInt32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.PathFillMode fillMode, Int32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.PathFillMode fillMode, UInt32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilFillPath(Int32 path, OpenTK.Graphics.ES30.All fillMode, Int32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilFillPath(Int32 path, OpenTK.Graphics.ES30.PathFillMode fillMode, Int32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilFillPath(UInt32 path, OpenTK.Graphics.ES30.All fillMode, UInt32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilFillPath(UInt32 path, OpenTK.Graphics.ES30.PathFillMode fillMode, UInt32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths">[length: COMPSIZE(numPaths,pathNameType,paths)]</param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(numPaths,transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr[] paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePath(Int32 path, Int32 reference, Int32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathNV")]
            [CLSCompliant(false)]
            public static void StencilStrokePath(UInt32 path, Int32 reference, UInt32 mask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilThenCoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr paths, Int32 pathBase, OpenTK.Graphics.ES30.All fillMode, Int32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilThenCoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr paths, UInt32 pathBase, OpenTK.Graphics.ES30.All fillMode, UInt32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr[] paths, Int32 pathBase, OpenTK.Graphics.ES30.All fillMode, Int32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverFillPathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr[] paths, UInt32 pathBase, OpenTK.Graphics.ES30.All fillMode, UInt32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverFillPath(Int32 path, OpenTK.Graphics.ES30.All fillMode, Int32 mask, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="fillMode"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverFillPath(UInt32 path, OpenTK.Graphics.ES30.All fillMode, UInt32 mask, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilThenCoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static unsafe void StencilThenCoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr[] paths, Int32 pathBase, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="numPaths"></param>
            /// <param name="pathNameType"></param>
            /// <param name="paths"></param>
            /// <param name="pathBase"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverStrokePathInstanced(Int32 numPaths, OpenTK.Graphics.ES30.All pathNameType, IntPtr[] paths, UInt32 pathBase, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.All coverMode, OpenTK.Graphics.ES30.All transformType, Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverStrokePath(Int32 path, Int32 reference, Int32 mask, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="path"></param>
            /// <param name="reference"></param>
            /// <param name="mask"></param>
            /// <param name="coverMode"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathNV")]
            [CLSCompliant(false)]
            public static void StencilThenCoverStrokePath(UInt32 path, Int32 reference, UInt32 mask, OpenTK.Graphics.ES30.All coverMode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conservative_raster]</summary>
            /// <param name="xbits"></param>
            /// <param name="ybits"></param>
            [AutoGenerated(Category = "NV_conservative_raster", Version = "", EntryPoint = "glSubpixelPrecisionBiasNV")]
            [CLSCompliant(false)]
            public static void SubpixelPrecisionBia(Int32 xbits, Int32 ybits) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_conservative_raster]</summary>
            /// <param name="xbits"></param>
            /// <param name="ybits"></param>
            [AutoGenerated(Category = "NV_conservative_raster", Version = "", EntryPoint = "glSubpixelPrecisionBiasNV")]
            [CLSCompliant(false)]
            public static void SubpixelPrecisionBia(UInt32 xbits, UInt32 ybits) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(Int32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(UInt32 fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] ref Single transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static unsafe void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] ref Single transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static unsafe void TransformPath(Int32 resultPath, Int32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] ref Single transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static unsafe void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.All transformType, [CountAttribute(Computed = "transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] Single[] transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] ref Single transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="srcPath"></param>
            /// <param name="transformType"></param>
            /// <param name="transformValues">[length: COMPSIZE(transformType)]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            [CLSCompliant(false)]
            public static unsafe void TransformPath(UInt32 resultPath, UInt32 srcPath, OpenTK.Graphics.ES30.PathTransformType transformType, [CountAttribute(Computed = "transformType")] Single* transformValues) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64NV")]
            public static void Uniform1(Int32 location, Int64 x) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64NV")]
            [CLSCompliant(false)]
            public static void Uniform1(Int32 location, UInt64 x) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64NV")]
            public static void Uniform2(Int32 location, Int64 x, Int64 y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64NV")]
            [CLSCompliant(false)]
            public static void Uniform2(Int32 location, UInt64 x, UInt64 y) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64NV")]
            public static void Uniform3(Int32 location, Int64 x, Int64 y, Int64 z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64NV")]
            [CLSCompliant(false)]
            public static void Uniform3(Int32 location, UInt64 x, UInt64 y, UInt64 z) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64NV")]
            public static void Uniform4(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            [CLSCompliant(false)]
            public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64NV")]
            [CLSCompliant(false)]
            public static void Uniform4(Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64NV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64NV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt64 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_bindless_texture]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="value">[length: count]</param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformHandle(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static unsafe void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            [CLSCompliant(false)]
            public static unsafe void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="x">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="y">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="w">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            /// <param name="h">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, Single x, Single y, Single w, Single h) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="x">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="y">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="w">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            /// <param name="h">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, Single x, Single y, Single w, Single h) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static unsafe void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            [CLSCompliant(false)]
            public static unsafe void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_clip_space_w_scaling]</summary>
            /// <param name="index"></param>
            /// <param name="xcoeff"></param>
            /// <param name="ycoeff"></param>
            [AutoGenerated(Category = "NV_clip_space_w_scaling", Version = "", EntryPoint = "glViewportPositionWScaleNV")]
            [CLSCompliant(false)]
            public static void ViewportPositionWScale(Int32 index, Single xcoeff, Single ycoeff) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_clip_space_w_scaling]</summary>
            /// <param name="index"></param>
            /// <param name="xcoeff"></param>
            /// <param name="ycoeff"></param>
            [AutoGenerated(Category = "NV_clip_space_w_scaling", Version = "", EntryPoint = "glViewportPositionWScaleNV")]
            [CLSCompliant(false)]
            public static void ViewportPositionWScale(UInt32 index, Single xcoeff, Single ycoeff) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_swizzle]</summary>
            /// <param name="index"></param>
            /// <param name="swizzlex"></param>
            /// <param name="swizzley"></param>
            /// <param name="swizzlez"></param>
            /// <param name="swizzlew"></param>
            [AutoGenerated(Category = "NV_viewport_swizzle", Version = "", EntryPoint = "glViewportSwizzleNV")]
            [CLSCompliant(false)]
            public static void ViewportSwizzle(Int32 index, OpenTK.Graphics.ES30.All swizzlex, OpenTK.Graphics.ES30.All swizzley, OpenTK.Graphics.ES30.All swizzlez, OpenTK.Graphics.ES30.All swizzlew) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_viewport_swizzle]</summary>
            /// <param name="index"></param>
            /// <param name="swizzlex"></param>
            /// <param name="swizzley"></param>
            /// <param name="swizzlez"></param>
            /// <param name="swizzlew"></param>
            [AutoGenerated(Category = "NV_viewport_swizzle", Version = "", EntryPoint = "glViewportSwizzleNV")]
            [CLSCompliant(false)]
            public static void ViewportSwizzle(UInt32 index, OpenTK.Graphics.ES30.All swizzlex, OpenTK.Graphics.ES30.All swizzley, OpenTK.Graphics.ES30.All swizzlez, OpenTK.Graphics.ES30.All swizzlew) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkSemaphore"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glWaitVkSemaphoreNV")]
            [CLSCompliant(false)]
            public static void WaitVkSemaphore(Int64 vkSemaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_draw_vulkan_image]</summary>
            /// <param name="vkSemaphore"></param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glWaitVkSemaphoreNV")]
            [CLSCompliant(false)]
            public static void WaitVkSemaphore(UInt64 vkSemaphore) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static void WeightPath(Int32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] Int32[] paths, [CountAttribute(Parameter = "numPaths")] Single[] weights) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static void WeightPath(Int32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] ref Int32 paths, [CountAttribute(Parameter = "numPaths")] ref Single weights) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static unsafe void WeightPath(Int32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] Int32* paths, [CountAttribute(Parameter = "numPaths")] Single* weights) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static void WeightPath(UInt32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] UInt32[] paths, [CountAttribute(Parameter = "numPaths")] Single[] weights) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static void WeightPath(UInt32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] ref UInt32 paths, [CountAttribute(Parameter = "numPaths")] ref Single weights) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: NV_path_rendering]</summary>
            /// <param name="resultPath"></param>
            /// <param name="numPaths"></param>
            /// <param name="paths">[length: numPaths]</param>
            /// <param name="weights">[length: numPaths]</param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            [CLSCompliant(false)]
            public static unsafe void WeightPath(UInt32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] UInt32* paths, [CountAttribute(Parameter = "numPaths")] Single* weights) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Oes
        {
            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(Int32 array) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(UInt32 array) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiOES")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiOES")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiOES")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES30.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiOES")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciOES")]
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES30.All src, OpenTK.Graphics.ES30.All dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciOES")]
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciOES")]
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES30.All src, OpenTK.Graphics.ES30.All dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciOES")]
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES30.All srcRGB, OpenTK.Graphics.ES30.All dstRGB, OpenTK.Graphics.ES30.All srcAlpha, OpenTK.Graphics.ES30.All dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES30.All srcRGB, OpenTK.Graphics.ES30.All dstRGB, OpenTK.Graphics.ES30.All srcAlpha, OpenTK.Graphics.ES30.All dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiOES")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="r">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="g">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="b">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiOES")]
            [CLSCompliant(false)]
            public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="r">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="g">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="b">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiOES")]
            [CLSCompliant(false)]
            public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_copy_image", Version = "", EntryPoint = "glCopyImageSubDataOES")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES30.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES30.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "OES_copy_image", Version = "", EntryPoint = "glCopyImageSubDataOES")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_copy_image", Version = "", EntryPoint = "glCopyImageSubDataOES")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES30.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES30.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName">
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget">
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel">
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX">
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY">
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ">
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName">
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget">
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX">
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY">
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ">
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth">
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight">
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth">
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "OES_copy_image", Version = "", EntryPoint = "glCopyImageSubDataOES")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES30.CopyBufferSubDataTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCopyTexSubImage3DOES")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCopyTexSubImage3DOES")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(Int32 first, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(Int32 first, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static unsafe void DepthRangeArray(Int32 first, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(UInt32 first, Int32 count, Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static void DepthRangeArray(UInt32 first, Int32 count, ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose depth range to update.
            /// </param>
            /// <param name="count">
            /// Specifies the number of viewports whose depth range to update.
            /// </param>
            /// <param name="v">
            /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvOES")]
            [CLSCompliant(false)]
            public static unsafe void DepthRangeArray(UInt32 first, Int32 count, Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose depth range to update.
            /// </param>
            /// <param name="n">
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f">
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeIndexedfOES")]
            [CLSCompliant(false)]
            public static void DepthRangeIndexed(Int32 index, Single n, Single f) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose depth range to update.
            /// </param>
            /// <param name="n">
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f">
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glDepthRangeIndexedfOES")]
            [CLSCompliant(false)]
            public static void DepthRangeIndexed(UInt32 index, Single n, Single f) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glDisableiOES")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glDisableiOES")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glDisableiOES")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glDisableiOES")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexOES")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexOES")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexOES")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsBaseVertexOES")]
            public static void DrawElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render multiple instances of a set of primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="instancecount">
            /// Specifies the number of instances of the indexed geometry that should be drawn.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
            public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 instancecount, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_elements_base_vertex]
            /// Render primitives from array data with a per-element offset
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the minimum array index contained in indices.
            /// </param>
            /// <param name="end">
            /// Specifies the maximum array index contained in indices.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="basevertex">
            /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
            /// </param>
            [AutoGenerated(Category = "OES_draw_elements_base_vertex", Version = "", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
            [CLSCompliant(false)]
            public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr[] indices, Int32 basevertex) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES30.All target, IntPtr image) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetTexture2DOES")]
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES30.All target, IntPtr image) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glEnableiOES")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glEnableiOES")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glEnableiOES")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glEnableiOES")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 zoffset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 zoffset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "OES_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "OES_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [OutAttribute] IntPtr[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data">[length: COMPSIZE(target)]</param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glGetFloati_vOES")]
            [CLSCompliant(false)]
            public static unsafe void GetFloat(OpenTK.Graphics.ES30.TypeEnum target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1]
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize]
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1]
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize]
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1]
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize]
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1]
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1]
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize]
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glIsEnablediOES")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glIsEnablediOES")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.All target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glIsEnablediOES")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, Int32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_draw_buffers_indexed|OES_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed|OES_viewport_array", Version = "", EntryPoint = "glIsEnablediOES")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap target, UInt32 index) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(Int32 array) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(UInt32 array) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access">
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access">
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES30.BufferTargetARB target, OpenTK.Graphics.ES30.BufferAccessARB access) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_sample_shading]
            /// Specifies minimum rate at which sample shaing takes place
            /// </summary>
            /// <param name="value">
            /// Specifies the rate at which samples are shaded within each covered pixel.
            /// </param>
            [AutoGenerated(Category = "OES_sample_shading", Version = "", EntryPoint = "glMinSampleShadingOES")]
            public static void MinSampleShading(Single value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname">
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value">
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_tessellation_shader", Version = "", EntryPoint = "glPatchParameteriOES")]
            public static void PatchParameter(OpenTK.Graphics.ES30.All pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname">
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value">
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            [AutoGenerated(Category = "OES_tessellation_shader", Version = "", EntryPoint = "glPatchParameteriOES")]
            public static void PatchParameter(OpenTK.Graphics.ES30.PatchParameterName pname, Int32 value) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_primitive_bounding_box]</summary>
            /// <param name="minX"></param>
            /// <param name="minY"></param>
            /// <param name="minZ"></param>
            /// <param name="minW"></param>
            /// <param name="maxX"></param>
            /// <param name="maxY"></param>
            /// <param name="maxZ"></param>
            /// <param name="maxW"></param>
            [AutoGenerated(Category = "OES_primitive_bounding_box", Version = "", EntryPoint = "glPrimitiveBoundingBoxOES")]
            public static void PrimitiveBoundingBox(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat">
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length]
            /// Specifies the address of an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length">
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat">
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length]
            /// Specifies the address of an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length">
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat">
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length]
            /// Specifies the address of an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length">
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat">
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length]
            /// Specifies the address of an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length">
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [CountAttribute(Parameter = "length")] IntPtr[] binary, Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref UInt32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static unsafe void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specifies the index of the first viewport whose scissor box to modify.
            /// </param>
            /// <param name="count">
            /// Specifies the number of scissor boxes to modify.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorArrayvOES")]
            [CLSCompliant(false)]
            public static unsafe void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="left">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="bottom">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="width">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            /// <param name="height">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="left">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="bottom">
            /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
            /// </param>
            /// <param name="width">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            /// <param name="height">
            /// Specify ths dimensions of the scissor box, in pixels.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static unsafe void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Define the scissor box for a specific viewport
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the viewport whose scissor box to modify.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glScissorIndexedvOES")]
            [CLSCompliant(false)]
            public static unsafe void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferOES")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferOES")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferOES")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferOES")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeOES")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeOES")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeOES")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size">
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "OES_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeOES")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 buffer, IntPtr offset, IntPtr size) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivOES")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] ref UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: COMPSIZE(pname)]</param>
            [AutoGenerated(Category = "OES_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivOES")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_storage_multisample_2d_array]
            /// Specify storage for a two-dimensional multisample array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
            /// </param>
            /// <param name="samples">
            /// Specify the number of samples in the texture.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in layers.
            /// </param>
            /// <param name="fixedsamplelocations">
            /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_storage_multisample_2d_array", Version = "", EntryPoint = "glTexStorage3DMultisampleOES")]
            public static void TexStorage3DMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_storage_multisample_2d_array]
            /// Specify storage for a two-dimensional multisample array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
            /// </param>
            /// <param name="samples">
            /// Specify the number of samples in the texture.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in layers.
            /// </param>
            /// <param name="fixedsamplelocations">
            /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
            /// </param>
            [AutoGenerated(Category = "OES_texture_storage_multisample_2d_array", Version = "", EntryPoint = "glTexStorage3DMultisampleOES")]
            public static void TexStorage3DMultisample(OpenTK.Graphics.ES30.TextureTarget target, Int32 samples, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
            /// </param>
            /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr[] pixels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_view", Version = "", EntryPoint = "glTextureViewOES")]
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 origtexture, OpenTK.Graphics.ES30.All internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "OES_texture_view", Version = "", EntryPoint = "glTextureViewOES")]
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES30.TextureTarget target, Int32 origtexture, OpenTK.Graphics.ES30.InternalFormat internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_view", Version = "", EntryPoint = "glTextureViewOES")]
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES30.All target, UInt32 origtexture, OpenTK.Graphics.ES30.All internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target">
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture">
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel">
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels">
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer">
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers">
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "OES_texture_view", Version = "", EntryPoint = "glTextureViewOES")]
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES30.TextureTarget target, UInt32 origtexture, OpenTK.Graphics.ES30.InternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES30.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES30.BufferTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static unsafe void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set multiple viewports
            /// </summary>
            /// <param name="first">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="count">
            /// Specify the number of viewports to set.
            /// </param>
            /// <param name="v">[length: COMPSIZE(count)]
            /// Specify the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportArrayvOES")]
            [CLSCompliant(false)]
            public static unsafe void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="x">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="y">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="w">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            /// <param name="h">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, Single x, Single y, Single w, Single h) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="x">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="y">
            /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            /// </param>
            /// <param name="w">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            /// <param name="h">
            /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, Single x, Single y, Single w, Single h) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static unsafe void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Single v) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OES_viewport_array]
            /// Set a specified viewport
            /// </summary>
            /// <param name="index">
            /// Specify the first viewport to set.
            /// </param>
            /// <param name="v">[length: 4]
            /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
            /// </param>
            [AutoGenerated(Category = "OES_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvOES")]
            [CLSCompliant(false)]
            public static unsafe void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single* v) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Ovr
        {
            /// <summary>[requires: OVR_multiview_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OVR_multiview_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTextureMultisampleMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultisampleMultiview(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level, Int32 samples, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OVR_multiview_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTextureMultisampleMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultisampleMultiview(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level, Int32 samples, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [AutoGenerated(Category = "OVR_multiview_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTextureMultisampleMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultisampleMultiview(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 samples, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [AutoGenerated(Category = "OVR_multiview_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTextureMultisampleMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultisampleMultiview(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 samples, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OVR_multiview", Version = "", EntryPoint = "glFramebufferTextureMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultiview(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OVR_multiview", Version = "", EntryPoint = "glFramebufferTextureMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultiview(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [AutoGenerated(Category = "OVR_multiview", Version = "", EntryPoint = "glFramebufferTextureMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultiview(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: OVR_multiview]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="baseViewIndex"></param>
            /// <param name="numViews"></param>
            [AutoGenerated(Category = "OVR_multiview", Version = "", EntryPoint = "glFramebufferTextureMultiviewOVR")]
            [CLSCompliant(false)]
            public static void FramebufferTextureMultiview(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Qcom
        {
            /// <summary>[requires: QCOM_alpha_test]
            /// Specify the alpha test function
            /// </summary>
            /// <param name="func">
            /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
            /// </param>
            /// <param name="@ref">
            /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
            /// </param>
            [AutoGenerated(Category = "QCOM_alpha_test", Version = "", EntryPoint = "glAlphaFuncQCOM")]
            public static void AlphaFunc(OpenTK.Graphics.ES30.All func, Single @ref) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void DisableDriverControl(Int32 driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void DisableDriverControl(UInt32 driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void EnableDriverControl(Int32 driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void EnableDriverControl(UInt32 driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            public static void EndTiling(OpenTK.Graphics.ES30.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            public static void EndTiling(OpenTK.Graphics.ES30.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES30.All target, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES30.All target, [OutAttribute] IntPtr[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] Int32[] buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] out Int32 buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] Int32* buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] Int32* buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] UInt32[] buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] out UInt32 buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] UInt32* buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] UInt32* buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] out Int32 framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] out UInt32 framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out Int32 length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source">[length: *length]</param>
            /// <param name="length"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] Int32* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] Int32[] programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out Int32 numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] out Int32 programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out Int32 numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] Int32* programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] Int32[] numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] Int32* programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] Int32* numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] UInt32[] programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out Int32 numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] out UInt32 programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out Int32 numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] UInt32* programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] Int32[] numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] UInt32* programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] Int32* numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] out Int32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] out UInt32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out Int32 numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] Int32[] numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] Int32[] shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] out Int32 numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] out Int32 shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] out Int32 numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] Int32* shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] Int32[] numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] Int32* shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] Int32* numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] UInt32[] shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] out Int32 numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] out UInt32 shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] out Int32 numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] UInt32* shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] Int32[] numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] UInt32* shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] Int32* numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute] IntPtr texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute] IntPtr[] texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [OutAttribute] IntPtr texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [OutAttribute] IntPtr[] texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out Int32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out UInt32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(Int32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(UInt32 program) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
            public static void ExtTexObjectStateOverride(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_shader_framebuffer_fetch_noncoherent]</summary>
            [AutoGenerated(Category = "QCOM_shader_framebuffer_fetch_noncoherent", Version = "", EntryPoint = "glFramebufferFetchBarrierQCOM")]
            public static void FramebufferFetchBarrier() { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="numLayers"></param>
            /// <param name="focalPointsPerLayer"></param>
            /// <param name="requestedFeatures"></param>
            /// <param name="providedFeatures">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationConfigQCOM")]
            [CLSCompliant(false)]
            public static void FramebufferFoveationConfig(Int32 framebuffer, Int32 numLayers, Int32 focalPointsPerLayer, Int32 requestedFeatures, [OutAttribute, CountAttribute(Count = 1)] out Int32 providedFeatures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="numLayers"></param>
            /// <param name="focalPointsPerLayer"></param>
            /// <param name="requestedFeatures"></param>
            /// <param name="providedFeatures">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationConfigQCOM")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferFoveationConfig(Int32 framebuffer, Int32 numLayers, Int32 focalPointsPerLayer, Int32 requestedFeatures, [OutAttribute, CountAttribute(Count = 1)] Int32* providedFeatures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="numLayers"></param>
            /// <param name="focalPointsPerLayer"></param>
            /// <param name="requestedFeatures"></param>
            /// <param name="providedFeatures">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationConfigQCOM")]
            [CLSCompliant(false)]
            public static void FramebufferFoveationConfig(UInt32 framebuffer, UInt32 numLayers, UInt32 focalPointsPerLayer, UInt32 requestedFeatures, [OutAttribute, CountAttribute(Count = 1)] out UInt32 providedFeatures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="numLayers"></param>
            /// <param name="focalPointsPerLayer"></param>
            /// <param name="requestedFeatures"></param>
            /// <param name="providedFeatures">[length: 1]</param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationConfigQCOM")]
            [CLSCompliant(false)]
            public static unsafe void FramebufferFoveationConfig(UInt32 framebuffer, UInt32 numLayers, UInt32 focalPointsPerLayer, UInt32 requestedFeatures, [OutAttribute, CountAttribute(Count = 1)] UInt32* providedFeatures) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="layer"></param>
            /// <param name="focalPoint"></param>
            /// <param name="focalX"></param>
            /// <param name="focalY"></param>
            /// <param name="gainX"></param>
            /// <param name="gainY"></param>
            /// <param name="foveaArea"></param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationParametersQCOM")]
            [CLSCompliant(false)]
            public static void FramebufferFoveationParameters(Int32 framebuffer, Int32 layer, Int32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_framebuffer_foveated]</summary>
            /// <param name="framebuffer"></param>
            /// <param name="layer"></param>
            /// <param name="focalPoint"></param>
            /// <param name="focalX"></param>
            /// <param name="focalY"></param>
            /// <param name="gainX"></param>
            /// <param name="gainY"></param>
            /// <param name="foveaArea"></param>
            [AutoGenerated(Category = "QCOM_framebuffer_foveated", Version = "", EntryPoint = "glFramebufferFoveationParametersQCOM")]
            [CLSCompliant(false)]
            public static void FramebufferFoveationParameters(UInt32 framebuffer, UInt32 layer, UInt32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32[] driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] UInt32[] driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] out Int32 driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] out UInt32 driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32* driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] UInt32* driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(UInt32 x, UInt32 y, UInt32 width, UInt32 height, OpenTK.Graphics.ES30.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(UInt32 x, UInt32 y, UInt32 width, UInt32 height, OpenTK.Graphics.ES30.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_texture_foveated]</summary>
            /// <param name="texture"></param>
            /// <param name="layer"></param>
            /// <param name="focalPoint"></param>
            /// <param name="focalX"></param>
            /// <param name="focalY"></param>
            /// <param name="gainX"></param>
            /// <param name="gainY"></param>
            /// <param name="foveaArea"></param>
            [AutoGenerated(Category = "QCOM_texture_foveated", Version = "", EntryPoint = "glTextureFoveationParametersQCOM")]
            [CLSCompliant(false)]
            public static void TextureFoveationParameters(Int32 texture, Int32 layer, Int32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea) { throw new BindingsNotRewrittenException(); }

            /// <summary>[requires: QCOM_texture_foveated]</summary>
            /// <param name="texture"></param>
            /// <param name="layer"></param>
            /// <param name="focalPoint"></param>
            /// <param name="focalX"></param>
            /// <param name="focalY"></param>
            /// <param name="gainX"></param>
            /// <param name="gainY"></param>
            /// <param name="foveaArea"></param>
            [AutoGenerated(Category = "QCOM_texture_foveated", Version = "", EntryPoint = "glTextureFoveationParametersQCOM")]
            [CLSCompliant(false)]
            public static void TextureFoveationParameters(UInt32 texture, UInt32 layer, UInt32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea) { throw new BindingsNotRewrittenException(); }

        }

        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginPerfMonitorAMD(UInt32 monitor);
        [Slot(114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeletePerfMonitorsAMD(Int32 n, [CountAttribute(Parameter = "n")] UInt32* monitors);
        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndPerfMonitorAMD(UInt32 monitor);
        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenPerfMonitorsAMD(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* monitors);
        [Slot(309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCounterDataAMD(UInt32 monitor, System.Int32 pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] UInt32* data, [OutAttribute, CountAttribute(Count = 1)] Int32* bytesWritten);
        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPerfMonitorCounterInfoAMD(UInt32 group, UInt32 counter, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data);
        [Slot(311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCountersAMD(UInt32 group, [OutAttribute, CountAttribute(Count = 1)] Int32* numCounters, [OutAttribute, CountAttribute(Count = 1)] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] UInt32* counters);
        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCounterStringAMD(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr counterString);
        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorGroupsAMD([OutAttribute, CountAttribute(Count = 1)] Int32* numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] UInt32* groups);
        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorGroupStringAMD(UInt32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr groupString);
        [Slot(598)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSelectPerfMonitorCountersAMD(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] UInt32* counterList);
        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlitFramebufferANGLE(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedANGLE(System.Int32 mode, Int32 first, Int32 count, Int32 primcount);
        [Slot(159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedANGLE(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount);
        [Slot(362)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTranslatedShaderSourceANGLE(UInt32 shader, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] IntPtr source);
        [Slot(574)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleANGLE(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(742)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisorANGLE(UInt32 index, UInt32 divisor);
        [Slot(65)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glClientWaitSyncAPPLE(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureLevelsAPPLE(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount);
        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteSyncAPPLE(IntPtr sync);
        [Slot(200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glFenceSyncAPPLE(System.Int32 condition, System.Int32 flags);
        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64vAPPLE(System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSyncivAPPLE(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values);
        [Slot(410)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSyncAPPLE(IntPtr sync);
        [Slot(575)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleAPPLE(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(580)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResolveMultisampleFramebufferAPPLE();
        [Slot(762)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitSyncAPPLE(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glApplyFramebufferAttachmentCMAAINTEL();
        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(System.Int32 texture);
        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAttachShader(UInt32 program, UInt32 shader);
        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQuery(System.Int32 target, UInt32 id);
        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginTransformFeedback(System.Int32 primitiveMode);
        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindAttribLocation(UInt32 program, UInt32 index, string name);
        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(System.Int32 target, UInt32 buffer);
        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBufferBase(System.Int32 target, UInt32 index, UInt32 buffer);
        [Slot(16)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBufferRange(System.Int32 target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFramebuffer(System.Int32 target, UInt32 framebuffer);
        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindRenderbuffer(System.Int32 target, UInt32 renderbuffer);
        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindSampler(UInt32 unit, UInt32 sampler);
        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTexture(System.Int32 target, UInt32 texture);
        [Slot(24)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTransformFeedback(System.Int32 target, UInt32 id);
        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexArray(UInt32 array);
        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendColor(Single red, Single green, Single blue, Single alpha);
        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquation(System.Int32 mode);
        [Slot(34)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparate(System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(37)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(System.Int32 sfactor, System.Int32 dfactor);
        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparate(System.Int32 sfactorRGB, System.Int32 dfactorRGB, System.Int32 sfactorAlpha, System.Int32 dfactorAlpha);
        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(System.Int32 target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 usage);
        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);
        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glCheckFramebufferStatus(System.Int32 target);
        [Slot(53)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(System.Int32 mask);
        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearBufferfi(System.Int32 buffer, Int32 drawbuffer, Single depth, Int32 stencil);
        [Slot(55)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferfv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single* value);
        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferiv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32* value);
        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferuiv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32* value);
        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(Single red, Single green, Single blue, Single alpha);
        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthf(Single d);
        [Slot(61)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(Int32 s);
        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glClientWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);
        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompileShader(UInt32 shader);
        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(72)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(74)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(78)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyBufferSubData(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(83)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(84)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glCreateProgram();
        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glCreateShader(System.Int32 type);
        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(System.Int32 mode);
        [Slot(103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);
        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControl(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled);
        [Slot(107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsert(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, [CountAttribute(Computed = "buf,length")] string buf);
        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* buffers);
        [Slot(111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* framebuffers);
        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteProgram(UInt32 program);
        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* renderbuffers);
        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers);
        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteShader(UInt32 shader);
        [Slot(124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteSync(IntPtr sync);
        [Slot(126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures);
        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(System.Int32 func);
        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);
        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangef(Single n, Single f);
        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDetachShader(UInt32 program, UInt32 shader);
        [Slot(138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(System.Int32 cap);
        [Slot(143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexAttribArray(UInt32 index);
        [Slot(145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArrays(System.Int32 mode, Int32 first, Int32 count);
        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstanced(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount);
        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] System.Int32* bufs);
        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElements(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        [Slot(158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstanced(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount);
        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawRangeElements(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(System.Int32 cap);
        [Slot(179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexAttribArray(UInt32 index);
        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQuery(System.Int32 target);
        [Slot(186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndTransformFeedback();
        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glFenceSync(System.Int32 condition, System.Int32 flags);
        [Slot(201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();
        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();
        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedBufferRange(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferRenderbuffer(System.Int32 target, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureLayer(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(System.Int32 mode);
        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers);
        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateMipmap(System.Int32 target);
        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers);
        [Slot(232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers);
        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* samplers);
        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures);
        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformBlockiv(UInt32 program, UInt32 uniformBlockIndex, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params);
        [Slot(244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr uniformBlockName);
        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformsiv(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32* uniformIndices, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params);
        [Slot(246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32* shaders);
        [Slot(247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetAttribLocation(UInt32 program, string name);
        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);
        [Slot(249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteri64v(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params);
        [Slot(250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferPointerv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe Int32 glGetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* sources, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glGetError();
        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* data);
        [Slot(265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetFragDataLocation(UInt32 program, [CountAttribute(Computed = "name")] string name);
        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferAttachmentParameteriv(System.Int32 target, System.Int32 attachment, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glGetGraphicsResetStatus();
        [Slot(272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64i_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data);
        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64v(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data);
        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegeri_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data);
        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* data);
        [Slot(278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInternalformativ(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformiv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformuiv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);
        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabel(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointerv(System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] System.Int32* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary);
        [Slot(322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramiv(UInt32 program, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryiv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectuiv(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetRenderbufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterfv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameteriv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderiv(UInt32 shader, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderPrecisionFormat(System.Int32 shadertype, System.Int32 precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32* range, [OutAttribute, CountAttribute(Count = 1)] Int32* precision);
        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr source);
        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(System.Int32 name);
        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetStringi(System.Int32 name, UInt32 index);
        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSynciv(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values);
        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetUniformBlockIndex(UInt32 program, [CountAttribute(Computed = "")] string uniformBlockName);
        [Slot(364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformfv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params);
        [Slot(366)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] string[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32* uniformIndices);
        [Slot(367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformiv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params);
        [Slot(368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetUniformLocation(UInt32 program, string name);
        [Slot(369)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformuiv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32* @params);
        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribfv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params);
        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params);
        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIuiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params);
        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params);
        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetVertexAttribPointerv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);
        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(System.Int32 target, System.Int32 mode);
        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateFramebuffer(System.Int32 target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] System.Int32* attachments);
        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateSubFramebuffer(System.Int32 target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] System.Int32* attachments, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(UInt32 buffer);
        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(System.Int32 cap);
        [Slot(395)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFramebuffer(UInt32 framebuffer);
        [Slot(401)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgram(UInt32 program);
        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsQuery(UInt32 id);
        [Slot(405)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsRenderbuffer(UInt32 renderbuffer);
        [Slot(406)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSampler(UInt32 sampler);
        [Slot(408)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsShader(UInt32 shader);
        [Slot(409)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSync(IntPtr sync);
        [Slot(411)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTexture(UInt32 texture);
        [Slot(413)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTransformFeedback(UInt32 id);
        [Slot(414)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsVertexArray(UInt32 array);
        [Slot(417)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(Single width);
        [Slot(418)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLinkProgram(UInt32 program);
        [Slot(424)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferRange(System.Int32 target, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(462)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabel(System.Int32 identifier, UInt32 name, Int32 length, [CountAttribute(Computed = "label,length")] string label);
        [Slot(464)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabel(IntPtr ptr, Int32 length, [CountAttribute(Computed = "label,length")] string label);
        [Slot(489)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPauseTransformFeedback();
        [Slot(490)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(System.Int32 pname, Int32 param);
        [Slot(493)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffset(Single factor, Single units);
        [Slot(495)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroup();
        [Slot(500)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramBinary(UInt32 program, System.Int32 binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length);
        [Slot(502)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramParameteri(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroup(System.Int32 source, UInt32 id, Int32 length, [CountAttribute(Computed = "message,length")] string message);
        [Slot(563)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadBuffer(System.Int32 src);
        [Slot(566)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr data);
        [Slot(569)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(571)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReleaseShaderCompiler();
        [Slot(572)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorage(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(573)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(581)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResumeTransformFeedback();
        [Slot(582)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(Single value, bool invert);
        [Slot(583)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameterf(UInt32 sampler, System.Int32 pname, Single param);
        [Slot(584)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterfv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* param);
        [Slot(585)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameteri(UInt32 sampler, System.Int32 pname, Int32 param);
        [Slot(590)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameteriv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* param);
        [Slot(591)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, System.Int32 binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length);
        [Slot(602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] string[] @string, [CountAttribute(Parameter = "count")] Int32* length);
        [Slot(609)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFuncSeparate(System.Int32 face, System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(611)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(UInt32 mask);
        [Slot(612)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMaskSeparate(System.Int32 face, UInt32 mask);
        [Slot(613)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(System.Int32 fail, System.Int32 zfail, System.Int32 zpass);
        [Slot(614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOpSeparate(System.Int32 face, System.Int32 sfail, System.Int32 dpfail, System.Int32 dppass);
        [Slot(627)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(628)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(631)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(System.Int32 target, System.Int32 pname, Single param);
        [Slot(632)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(633)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(638)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(640)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(642)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(650)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(651)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(664)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTransformFeedbackVaryings(UInt32 program, Int32 count, [CountAttribute(Parameter = "count")] string[] varyings, System.Int32 bufferMode);
        [Slot(666)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1f(Int32 location, Single v0);
        [Slot(667)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single* value);
        [Slot(668)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i(Int32 location, Int32 v0);
        [Slot(671)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32* value);
        [Slot(672)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui(Int32 location, UInt32 v0);
        [Slot(675)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32* value);
        [Slot(676)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2f(Int32 location, Single v0, Single v1);
        [Slot(677)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value);
        [Slot(678)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i(Int32 location, Int32 v0, Int32 v1);
        [Slot(681)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value);
        [Slot(682)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui(Int32 location, UInt32 v0, UInt32 v1);
        [Slot(685)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value);
        [Slot(686)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3f(Int32 location, Single v0, Single v1, Single v2);
        [Slot(687)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value);
        [Slot(688)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(691)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value);
        [Slot(692)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(695)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value);
        [Slot(696)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(697)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(698)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(701)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value);
        [Slot(702)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(705)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value);
        [Slot(706)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);
        [Slot(711)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(712)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(714)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(716)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value);
        [Slot(717)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(719)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(721)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value);
        [Slot(722)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(724)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(726)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapBuffer(System.Int32 target);
        [Slot(728)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgram(UInt32 program);
        [Slot(731)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgram(UInt32 program);
        [Slot(733)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib1f(UInt32 index, Single x);
        [Slot(734)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib1fv(UInt32 index, [CountAttribute(Count = 1)] Single* v);
        [Slot(735)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib2f(UInt32 index, Single x, Single y);
        [Slot(736)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib2fv(UInt32 index, [CountAttribute(Count = 2)] Single* v);
        [Slot(737)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib3f(UInt32 index, Single x, Single y, Single z);
        [Slot(738)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib3fv(UInt32 index, [CountAttribute(Count = 3)] Single* v);
        [Slot(739)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w);
        [Slot(740)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4fv(UInt32 index, [CountAttribute(Count = 4)] Single* v);
        [Slot(741)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisor(UInt32 index, UInt32 divisor);
        [Slot(745)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4i(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        [Slot(746)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4iv(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(747)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        [Slot(748)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4uiv(UInt32 index, [CountAttribute(Count = 4)] UInt32* v);
        [Slot(749)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        [Slot(750)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribPointer(UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        [Slot(751)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(761)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glAcquireKeyedMutexWin32EXT(UInt32 memory, UInt64 key, UInt32 timeout);
        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveProgramEXT(UInt32 program);
        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveShaderProgramEXT(UInt32 pipeline, UInt32 program);
        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQueryEXT(System.Int32 target, UInt32 id);
        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFragDataLocationEXT(UInt32 program, UInt32 color, [CountAttribute(Computed = "name")] string name);
        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFragDataLocationIndexedEXT(UInt32 program, UInt32 colorNumber, UInt32 index, string name);
        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindProgramPipelineEXT(UInt32 pipeline);
        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationEXT(System.Int32 mode);
        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationiEXT(UInt32 buf, System.Int32 mode);
        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparateiEXT(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(38)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunciEXT(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparateiEXT(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferStorageEXT(System.Int32 target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 flags);
        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferStorageExternalEXT(System.Int32 target, IntPtr offset, IntPtr size, IntPtr clientBuffer, System.Int32 flags);
        [Slot(50)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferStorageMemEXT(System.Int32 target, IntPtr size, UInt32 memory, UInt64 offset);
        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearPixelLocalStorageuiEXT(Int32 offset, Int32 n, [CountAttribute(Parameter = "n")] UInt32* values);
        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearTexImageEXT(UInt32 texture, Int32 level, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(63)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearTexSubImageEXT(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(66)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClipControlEXT(System.Int32 origin, System.Int32 depth);
        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMaskiEXT(UInt32 index, bool r, bool g, bool b, bool a);
        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyImageSubDataEXT(UInt32 srcName, System.Int32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, System.Int32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);
        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateMemoryObjectsEXT(Int32 n, [OutAttribute] UInt32* memoryObjects);
        [Slot(100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glCreateShaderProgramEXT(System.Int32 type, string @string);
        [Slot(101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glCreateShaderProgramvEXT(System.Int32 type, Int32 count, [CountAttribute(Parameter = "count")] string[] strings);
        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteMemoryObjectsEXT(Int32 n, [CountAttribute(Parameter = "n")] UInt32* memoryObjects);
        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteProgramPipelinesEXT(Int32 n, [CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteQueriesEXT(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteSemaphoresEXT(Int32 n, [CountAttribute(Parameter = "n")] UInt32* semaphores);
        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableiEXT(System.Int32 target, UInt32 index);
        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDiscardFramebufferEXT(System.Int32 target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] System.Int32* attachments);
        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedBaseInstanceEXT(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance);
        [Slot(149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedEXT(System.Int32 mode, Int32 start, Int32 count, Int32 primcount);
        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawBuffersEXT(Int32 n, [CountAttribute(Parameter = "n")] System.Int32* bufs);
        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawBuffersIndexedEXT(Int32 n, [CountAttribute(Parameter = "n")] System.Int32* location, [CountAttribute(Parameter = "n")] Int32* indices);
        [Slot(156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsBaseVertexEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseInstanceEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, UInt32 baseinstance);
        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseVertexBaseInstanceEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance);
        [Slot(162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseVertexEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex);
        [Slot(164)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount);
        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawRangeElementsBaseVertexEXT(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackEXT(System.Int32 mode, UInt32 id);
        [Slot(170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackInstancedEXT(System.Int32 mode, UInt32 id, Int32 instancecount);
        [Slot(176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableiEXT(System.Int32 target, UInt32 index);
        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQueryEXT(System.Int32 target);
        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedBufferRangeEXT(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferPixelLocalStorageSizeEXT(UInt32 target, Int32 size);
        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DMultisampleEXT(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 samples);
        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureEXT(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenProgramPipelinesEXT(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenQueriesEXT(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenSemaphoresEXT(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* semaphores);
        [Slot(264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetFragDataIndexEXT(UInt32 program, string name);
        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetFramebufferPixelLocalStorageSizeEXT(System.Int32 target);
        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glGetGraphicsResetStatusEXT();
        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegeri_vEXT(System.Int32 target, UInt32 index, [OutAttribute] Int32* data);
        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMemoryObjectParameterivEXT(UInt32 memoryObject, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfvEXT(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* @params);
        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformivEXT(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabelEXT(System.Int32 type, UInt32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineInfoLogEXT(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineivEXT(UInt32 pipeline, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGetProgramResourceLocationIndexEXT(UInt32 program, System.Int32 programInterface, [CountAttribute(Computed = "name")] string name);
        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryivEXT(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjecti64vEXT(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params);
        [Slot(331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectivEXT(UInt32 id, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectui64vEXT(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params);
        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectuivEXT(UInt32 id, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIivEXT(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIuivEXT(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSemaphoreParameterui64vEXT(UInt32 semaphore, System.Int32 pname, [OutAttribute] UInt64* @params);
        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIivEXT(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIuivEXT(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(370)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUnsignedBytei_vEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Byte* data);
        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUnsignedBytevEXT(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Byte* data);
        [Slot(379)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportMemoryFdEXT(UInt32 memory, UInt64 size, System.Int32 handleType, Int32 fd);
        [Slot(380)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportMemoryWin32HandleEXT(UInt32 memory, UInt64 size, System.Int32 handleType, [OutAttribute] IntPtr handle);
        [Slot(381)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportMemoryWin32NameEXT(UInt32 memory, UInt64 size, System.Int32 handleType, IntPtr name);
        [Slot(382)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportSemaphoreFdEXT(UInt32 semaphore, System.Int32 handleType, Int32 fd);
        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportSemaphoreWin32HandleEXT(UInt32 semaphore, System.Int32 handleType, [OutAttribute] IntPtr handle);
        [Slot(384)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glImportSemaphoreWin32NameEXT(UInt32 semaphore, System.Int32 handleType, IntPtr name);
        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInsertEventMarkerEXT(Int32 length, string marker);
        [Slot(391)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnablediEXT(System.Int32 target, UInt32 index);
        [Slot(397)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsMemoryObjectEXT(UInt32 memoryObject);
        [Slot(402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgramPipelineEXT(UInt32 pipeline);
        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsQueryEXT(UInt32 id);
        [Slot(407)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSemaphoreEXT(UInt32 semaphore);
        [Slot(416)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLabelObjectEXT(System.Int32 type, UInt32 @object, Int32 length, string label);
        [Slot(425)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferRangeEXT(System.Int32 target, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixFrustumEXT(System.Int32 mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar);
        [Slot(429)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoaddEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(430)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadfEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(431)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixLoadIdentityEXT(System.Int32 mode);
        [Slot(433)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTransposedEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(434)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTransposefEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(437)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultdEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(438)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultfEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(440)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTransposedEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(441)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTransposefEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(442)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixOrthoEXT(System.Int32 mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar);
        [Slot(443)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixPopEXT(System.Int32 mode);
        [Slot(444)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixPushEXT(System.Int32 mode);
        [Slot(445)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixRotatedEXT(System.Int32 mode, Double angle, Double x, Double y, Double z);
        [Slot(446)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixRotatefEXT(System.Int32 mode, Single angle, Single x, Single y, Single z);
        [Slot(447)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixScaledEXT(System.Int32 mode, Double x, Double y, Double z);
        [Slot(448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixScalefEXT(System.Int32 mode, Single x, Single y, Single z);
        [Slot(449)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixTranslatedEXT(System.Int32 mode, Double x, Double y, Double z);
        [Slot(450)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixTranslatefEXT(System.Int32 mode, Single x, Single y, Single z);
        [Slot(452)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMemoryObjectParameterivEXT(UInt32 memoryObject, System.Int32 pname, Int32* @params);
        [Slot(454)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawArraysEXT(System.Int32 mode, [CountAttribute(Computed = "primcount")] Int32* first, [CountAttribute(Computed = "primcount")] Int32* count, Int32 primcount);
        [Slot(455)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirectEXT(System.Int32 mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(456)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElementsBaseVertexEXT(System.Int32 mode, [CountAttribute(Computed = "drawcount")] Int32* count, System.Int32 type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 primcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex);
        [Slot(457)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElementsEXT(System.Int32 mode, [CountAttribute(Computed = "primcount")] Int32* count, System.Int32 type, [CountAttribute(Computed = "primcount")] IntPtr indices, Int32 primcount);
        [Slot(458)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirectEXT(System.Int32 mode, System.Int32 type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(459)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferStorageExternalEXT(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr clientBuffer, System.Int32 flags);
        [Slot(460)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferStorageMemEXT(UInt32 buffer, IntPtr size, UInt32 memory, UInt64 offset);
        [Slot(466)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPatchParameteriEXT(System.Int32 pname, Int32 value);
        [Slot(494)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetClampEXT(Single factor, Single units, Single clamp);
        [Slot(497)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopGroupMarkerEXT();
        [Slot(498)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPrimitiveBoundingBoxEXT(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW);
        [Slot(503)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramParameteriEXT(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(505)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1fEXT(UInt32 program, Int32 location, Single v0);
        [Slot(506)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value);
        [Slot(509)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1iEXT(UInt32 program, Int32 location, Int32 v0);
        [Slot(510)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value);
        [Slot(513)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1uiEXT(UInt32 program, Int32 location, UInt32 v0);
        [Slot(514)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32* value);
        [Slot(515)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2fEXT(UInt32 program, Int32 location, Single v0, Single v1);
        [Slot(516)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value);
        [Slot(519)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1);
        [Slot(520)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value);
        [Slot(523)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);
        [Slot(524)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value);
        [Slot(525)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2);
        [Slot(526)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value);
        [Slot(529)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(530)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value);
        [Slot(533)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value);
        [Slot(535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(539)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(540)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value);
        [Slot(543)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value);
        [Slot(549)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(550)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(551)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(552)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value);
        [Slot(553)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(554)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value);
        [Slot(556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(557)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(560)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushGroupMarkerEXT(Int32 length, string marker);
        [Slot(561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glQueryCounterEXT(UInt32 id, System.Int32 target);
        [Slot(562)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterSamplesEXT(UInt32 samples, bool fixedsamplelocations);
        [Slot(564)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadBufferIndexedEXT(System.Int32 src, Int32 index);
        [Slot(567)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixelsEXT(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        [Slot(570)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glReleaseKeyedMutexWin32EXT(UInt32 memory, UInt64 key);
        [Slot(576)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleEXT(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(586)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIivEXT(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* param);
        [Slot(588)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIuivEXT(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* param);
        [Slot(599)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSemaphoreParameterui64vEXT(UInt32 semaphore, System.Int32 pname, UInt64* @params);
        [Slot(603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSignalSemaphoreEXT(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] System.Int32* dstLayouts);
        [Slot(623)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferEXT(System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(625)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferRangeEXT(System.Int32 target, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(630)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexPageCommitmentEXT(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool commit);
        [Slot(634)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIivEXT(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(636)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIuivEXT(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(639)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage1DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(641)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(643)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(645)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorageMem1DEXT(System.Int32 target, Int32 levels, System.Int32 internalFormat, Int32 width, UInt32 memory, UInt64 offset);
        [Slot(646)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorageMem2DEXT(System.Int32 target, Int32 levels, System.Int32 internalFormat, Int32 width, Int32 height, UInt32 memory, UInt64 offset);
        [Slot(647)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorageMem2DMultisampleEXT(System.Int32 target, Int32 samples, System.Int32 internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, UInt32 memory, UInt64 offset);
        [Slot(648)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorageMem3DEXT(System.Int32 target, Int32 levels, System.Int32 internalFormat, Int32 width, Int32 height, Int32 depth, UInt32 memory, UInt64 offset);
        [Slot(649)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorageMem3DMultisampleEXT(System.Int32 target, Int32 samples, System.Int32 internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, UInt32 memory, UInt64 offset);
        [Slot(654)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage1DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(655)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(656)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(657)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorageMem1DEXT(UInt32 texture, Int32 levels, System.Int32 internalFormat, Int32 width, UInt32 memory, UInt64 offset);
        [Slot(658)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorageMem2DEXT(UInt32 texture, Int32 levels, System.Int32 internalFormat, Int32 width, Int32 height, UInt32 memory, UInt64 offset);
        [Slot(659)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorageMem2DMultisampleEXT(UInt32 texture, Int32 samples, System.Int32 internalFormat, Int32 width, Int32 height, bool fixedSampleLocations, UInt32 memory, UInt64 offset);
        [Slot(660)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorageMem3DEXT(UInt32 texture, Int32 levels, System.Int32 internalFormat, Int32 width, Int32 height, Int32 depth, UInt32 memory, UInt64 offset);
        [Slot(661)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorageMem3DMultisampleEXT(UInt32 texture, Int32 samples, System.Int32 internalFormat, Int32 width, Int32 height, Int32 depth, bool fixedSampleLocations, UInt32 memory, UInt64 offset);
        [Slot(662)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureViewEXT(UInt32 texture, System.Int32 target, UInt32 origtexture, System.Int32 internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
        [Slot(729)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgramStagesEXT(UInt32 pipeline, System.Int32 stages, UInt32 program);
        [Slot(730)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseShaderProgramEXT(System.Int32 type, UInt32 program);
        [Slot(732)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgramPipelineEXT(UInt32 pipeline);
        [Slot(743)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisorEXT(UInt32 index, UInt32 divisor);
        [Slot(760)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWaitSemaphoreEXT(UInt32 semaphore, UInt32 numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] UInt32* buffers, UInt32 numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] UInt32* textures, [CountAttribute(Computed = "numTextureBarriers")] System.Int32* srcLayouts);
        [Slot(765)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowRectanglesEXT(System.Int32 mode, Int32 count, [CountAttribute(Computed = "count")] Int32* box);
        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DDownsampleIMG(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale);
        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DMultisampleIMG(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 samples);
        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureLayerDownsampleIMG(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale);
        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int64 glGetTextureHandleIMG(UInt32 texture);
        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int64 glGetTextureSamplerHandleIMG(UInt32 texture, UInt32 sampler);
        [Slot(545)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniformHandleui64IMG(UInt32 program, Int32 location, UInt64 value);
        [Slot(547)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformHandleui64vIMG(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values);
        [Slot(577)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleIMG(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(707)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformHandleui64IMG(Int32 location, UInt64 value);
        [Slot(709)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformHandleui64vIMG(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(9)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginPerfQueryINTEL(UInt32 queryHandle);
        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreatePerfQueryINTEL(UInt32 queryId, [OutAttribute] UInt32* queryHandle);
        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeletePerfQueryINTEL(UInt32 queryHandle);
        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndPerfQueryINTEL(UInt32 queryHandle);
        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFirstPerfQueryIdINTEL([OutAttribute] UInt32* queryId);
        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNextPerfQueryIdINTEL(UInt32 queryId, [OutAttribute] UInt32* nextQueryId);
        [Slot(308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfCounterInfoINTEL(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] IntPtr counterName, UInt32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] IntPtr counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue);
        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryDataINTEL(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten);
        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryIdByNameINTEL(string queryName, [OutAttribute] UInt32* queryId);
        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryInfoINTEL(UInt32 queryId, UInt32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] IntPtr queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask);
        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendBarrierKHR();
        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);
        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControlKHR(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsertKHR(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, string buf);
        [Slot(255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe Int32 glGetDebugMessageLogKHR(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* sources, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glGetGraphicsResetStatusKHR();
        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfvKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformivKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformuivKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);
        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointervKHR(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(451)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaxShaderCompilerThreadsKHR(UInt32 count);
        [Slot(463)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 length, string label);
        [Slot(465)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabelKHR(IntPtr ptr, Int32 length, string label);
        [Slot(496)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroupKHR();
        [Slot(559)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroupKHR(System.Int32 source, UInt32 id, Int32 length, string message);
        [Slot(568)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixelsKHR(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginConditionalRenderNV(UInt32 id, System.Int32 mode);
        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendBarrierNV();
        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendParameteriNV(System.Int32 pname, Int32 value);
        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlitFramebufferNV(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(77)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConservativeRasterParameteriNV(System.Int32 pname, Int32 param);
        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyBufferSubDataNV(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyPathNV(UInt32 resultPath, UInt32 srcPath);
        [Slot(88)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverageMaskNV(bool mask);
        [Slot(89)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverageModulationNV(System.Int32 components);
        [Slot(90)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverageModulationTableNV(Int32 n, [CountAttribute(Parameter = "n")] Single* v);
        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverageOperationNV(System.Int32 operation);
        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 coverMode, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(93)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverFillPathNV(UInt32 path, System.Int32 coverMode);
        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 coverMode, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(95)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverStrokePathNV(UInt32 path, System.Int32 coverMode);
        [Slot(110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFencesNV(Int32 n, [CountAttribute(Parameter = "n")] UInt32* fences);
        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeletePathsNV(UInt32 path, Int32 range);
        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDepthRangeArrayfvNV(UInt32 first, Int32 count, Single* v);
        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangeIndexedfNV(UInt32 index, Single n, Single f);
        [Slot(141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableiNV(System.Int32 target, UInt32 index);
        [Slot(150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedNV(System.Int32 mode, Int32 first, Int32 count, Int32 primcount);
        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawBuffersNV(Int32 n, [CountAttribute(Parameter = "n")] System.Int32* bufs);
        [Slot(165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedNV(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount);
        [Slot(171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawVkImageNV(UInt64 vkImage, UInt32 sampler, Single x0, Single y0, Single x1, Single y1, Single z, Single s0, Single t0, Single s1, Single t1);
        [Slot(177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableiNV(System.Int32 target, UInt32 index);
        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndConditionalRenderNV();
        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinishFenceNV(UInt32 fence);
        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFragmentCoverageColorNV(UInt32 color);
        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFramebufferSampleLocationsfvNV(System.Int32 target, UInt32 start, Int32 count, Single* v);
        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFencesNV(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* fences);
        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int32 glGenPathsNV(Int32 range);
        [Slot(253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetCoverageModulationTableNV(Int32 bufsize, [OutAttribute] Single* v);
        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFenceivNV(UInt32 fence, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloati_vNV(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data);
        [Slot(271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int64 glGetImageHandleNV(UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 format);
        [Slot(279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInternalformatSampleivNV(System.Int32 target, System.Int32 internalformat, Int32 samples, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathColorGenfvNV(System.Int32 color, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value);
        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathColorGenivNV(System.Int32 color, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value);
        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathCommandsNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands);
        [Slot(298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathCoordsNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* coords);
        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathDashArrayNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* dashArray);
        [Slot(300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Single glGetPathLengthNV(UInt32 path, Int32 startSegment, Int32 numSegments);
        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathMetricRangeNV(System.Int32 metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics);
        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathMetricsNV(System.Int32 metricQueryMask, Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics);
        [Slot(303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathParameterfvNV(UInt32 path, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Single* value);
        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathParameterivNV(UInt32 path, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value);
        [Slot(305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathSpacingNV(System.Int32 pathListMode, Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Single advanceScale, Single kerningScale, System.Int32 transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing);
        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathTexGenfvNV(System.Int32 texCoordSet, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value);
        [Slot(307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathTexGenivNV(System.Int32 texCoordSet, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value);
        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourcefvNV(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 propCount, System.Int32* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params);
        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int64 glGetTextureHandleNV(UInt32 texture);
        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern Int64 glGetTextureSamplerHandleNV(UInt32 texture, UInt32 sampler);
        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformi64vNV(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64* @params);
        [Slot(377)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetVkProcAddrNV([CountAttribute(Computed = "name")] string name);
        [Slot(386)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInterpolatePathsNV(UInt32 resultPath, UInt32 pathA, UInt32 pathB, Single weight);
        [Slot(392)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnablediNV(System.Int32 target, UInt32 index);
        [Slot(394)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFenceNV(UInt32 fence);
        [Slot(396)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsImageHandleResidentNV(UInt64 handle);
        [Slot(398)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPathNV(UInt32 path);
        [Slot(399)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPointInFillPathNV(UInt32 path, UInt32 mask, Single x, Single y);
        [Slot(400)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPointInStrokePathNV(UInt32 path, Single x, Single y);
        [Slot(412)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTextureHandleResidentNV(UInt64 handle);
        [Slot(419)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleNonResidentNV(UInt64 handle);
        [Slot(420)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleResidentNV(UInt64 handle, System.Int32 access);
        [Slot(421)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleNonResidentNV(UInt64 handle);
        [Slot(422)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleResidentNV(UInt64 handle);
        [Slot(427)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoad3x2fNV(System.Int32 matrixMode, Single* m);
        [Slot(428)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoad3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(432)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTranspose3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(435)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMult3x2fNV(System.Int32 matrixMode, Single* m);
        [Slot(436)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMult3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(439)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTranspose3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(461)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedFramebufferSampleLocationsfvNV(UInt32 framebuffer, UInt32 start, Int32 count, Single* v);
        [Slot(468)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathColorGenNV(System.Int32 color, System.Int32 genMode, System.Int32 colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single* coeffs);
        [Slot(469)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathCommandsNV(UInt32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(470)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathCoordsNV(UInt32 path, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(471)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathCoverDepthFuncNV(System.Int32 func);
        [Slot(472)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathDashArrayNV(UInt32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single* dashArray);
        [Slot(473)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathFogGenNV(System.Int32 genMode);
        [Slot(474)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glPathGlyphIndexArrayNV(UInt32 firstPathName, System.Int32 fontTarget, IntPtr fontName, System.Int32 fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(475)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glPathGlyphIndexRangeNV(System.Int32 fontTarget, IntPtr fontName, System.Int32 fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount);
        [Slot(476)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathGlyphRangeNV(UInt32 firstPathName, System.Int32 fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, System.Int32 fontStyle, UInt32 firstGlyph, Int32 numGlyphs, System.Int32 handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(477)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathGlyphsNV(UInt32 firstPathName, System.Int32 fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, System.Int32 fontStyle, Int32 numGlyphs, System.Int32 type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, System.Int32 handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(478)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern System.Int32 glPathMemoryGlyphIndexArrayNV(UInt32 firstPathName, System.Int32 fontTarget, IntPtr fontSize, IntPtr fontData, Int32 faceIndex, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(479)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathParameterfNV(UInt32 path, System.Int32 pname, Single value);
        [Slot(480)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathParameterfvNV(UInt32 path, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* value);
        [Slot(481)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathParameteriNV(UInt32 path, System.Int32 pname, Int32 value);
        [Slot(482)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathParameterivNV(UInt32 path, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* value);
        [Slot(483)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStencilDepthOffsetNV(Single factor, Single units);
        [Slot(484)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStencilFuncNV(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(485)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStringNV(UInt32 path, System.Int32 format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString);
        [Slot(486)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathSubCommandsNV(UInt32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(487)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathSubCoordsNV(UInt32 path, Int32 coordStart, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(488)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathTexGenNV(System.Int32 texCoordSet, System.Int32 genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single* coeffs);
        [Slot(491)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe byte glPointAlongPathNV(UInt32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] Single* x, [OutAttribute, CountAttribute(Count = 1)] Single* y, [OutAttribute, CountAttribute(Count = 1)] Single* tangentX, [OutAttribute, CountAttribute(Count = 1)] Single* tangentY);
        [Slot(492)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonModeNV(System.Int32 face, System.Int32 mode);
        [Slot(504)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramPathFragmentInputGenNV(UInt32 program, Int32 location, System.Int32 genMode, Int32 components, Single* coeffs);
        [Slot(507)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1i64NV(UInt32 program, Int32 location, Int64 x);
        [Slot(508)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value);
        [Slot(511)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1ui64NV(UInt32 program, Int32 location, UInt64 x);
        [Slot(512)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(517)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2i64NV(UInt32 program, Int32 location, Int64 x, Int64 y);
        [Slot(518)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(521)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y);
        [Slot(522)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(527)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3i64NV(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(528)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(531)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(532)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(537)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4i64NV(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(538)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(541)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(542)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(546)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniformHandleui64NV(UInt32 program, Int32 location, UInt64 value);
        [Slot(548)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformHandleui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values);
        [Slot(565)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadBufferNV(System.Int32 mode);
        [Slot(578)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleNV(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(579)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResolveDepthValuesNV();
        [Slot(592)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorArrayvNV(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v);
        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissorIndexedNV(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);
        [Slot(596)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorIndexedvNV(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(600)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSetFenceNV(UInt32 fence, System.Int32 condition);
        [Slot(604)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSignalVkFenceNV(UInt64 vkFence);
        [Slot(605)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSignalVkSemaphoreNV(UInt64 vkSemaphore);
        [Slot(607)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 fillMode, UInt32 mask, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(608)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFillPathNV(UInt32 path, System.Int32 fillMode, UInt32 mask);
        [Slot(615)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(616)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilStrokePathNV(UInt32 path, Int32 reference, UInt32 mask);
        [Slot(617)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilThenCoverFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, IntPtr paths, UInt32 pathBase, System.Int32 fillMode, UInt32 mask, System.Int32 coverMode, System.Int32 transformType, Single* transformValues);
        [Slot(618)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilThenCoverFillPathNV(UInt32 path, System.Int32 fillMode, UInt32 mask, System.Int32 coverMode);
        [Slot(619)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilThenCoverStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, System.Int32 coverMode, System.Int32 transformType, Single* transformValues);
        [Slot(620)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilThenCoverStrokePathNV(UInt32 path, Int32 reference, UInt32 mask, System.Int32 coverMode);
        [Slot(621)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSubpixelPrecisionBiasNV(UInt32 xbits, UInt32 ybits);
        [Slot(622)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glTestFenceNV(UInt32 fence);
        [Slot(665)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTransformPathNV(UInt32 resultPath, UInt32 srcPath, System.Int32 transformType, [CountAttribute(Computed = "transformType")] Single* transformValues);
        [Slot(669)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i64NV(Int32 location, Int64 x);
        [Slot(670)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int64* value);
        [Slot(673)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui64NV(Int32 location, UInt64 x);
        [Slot(674)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64* value);
        [Slot(679)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i64NV(Int32 location, Int64 x, Int64 y);
        [Slot(680)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(683)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui64NV(Int32 location, UInt64 x, UInt64 y);
        [Slot(684)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(689)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i64NV(Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(690)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(693)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui64NV(Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(694)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(699)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i64NV(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(700)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(703)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui64NV(Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(704)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(708)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformHandleui64NV(Int32 location, UInt64 value);
        [Slot(710)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformHandleui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(713)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x3fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(715)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x4fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(718)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x2fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(720)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x4fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(723)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x2fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(725)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x3fvNV(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(744)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisorNV(UInt32 index, UInt32 divisor);
        [Slot(752)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportArrayvNV(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v);
        [Slot(754)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportIndexedfNV(UInt32 index, Single x, Single y, Single w, Single h);
        [Slot(756)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportIndexedfvNV(UInt32 index, [CountAttribute(Count = 4)] Single* v);
        [Slot(758)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportPositionWScaleNV(UInt32 index, Single xcoeff, Single ycoeff);
        [Slot(759)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportSwizzleNV(UInt32 index, System.Int32 swizzlex, System.Int32 swizzley, System.Int32 swizzlez, System.Int32 swizzlew);
        [Slot(763)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitVkSemaphoreNV(UInt64 vkSemaphore);
        [Slot(764)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWeightPathsNV(UInt32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] UInt32* paths, [CountAttribute(Parameter = "numPaths")] Single* weights);
        [Slot(26)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexArrayOES(UInt32 array);
        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationiOES(UInt32 buf, System.Int32 mode);
        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparateiOES(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunciOES(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparateiOES(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMaskiOES(UInt32 index, bool r, bool g, bool b, bool a);
        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage3DOES(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyImageSubDataOES(UInt32 srcName, System.Int32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, System.Int32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);
        [Slot(86)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteVertexArraysOES(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDepthRangeArrayfvOES(UInt32 first, Int32 count, Single* v);
        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangeIndexedfOES(UInt32 index, Single n, Single f);
        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableiOES(System.Int32 target, UInt32 index);
        [Slot(157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsBaseVertexOES(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseVertexOES(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex);
        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawRangeElementsBaseVertexOES(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEGLImageTargetRenderbufferStorageOES(System.Int32 target, IntPtr image);
        [Slot(173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEGLImageTargetTexture2DOES(System.Int32 target, IntPtr image);
        [Slot(178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableiOES(System.Int32 target, UInt32 index);
        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture3DOES(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 zoffset);
        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureOES(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenVertexArraysOES(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferPointervOES(System.Int32 target, System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloati_vOES(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data);
        [Slot(321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramBinaryOES(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] System.Int32* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary);
        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIivOES(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIuivOES(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIivOES(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIuivOES(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(393)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnablediOES(System.Int32 target, UInt32 index);
        [Slot(415)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsVertexArrayOES(UInt32 array);
        [Slot(423)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferOES(System.Int32 target, System.Int32 access);
        [Slot(453)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMinSampleShadingOES(Single value);
        [Slot(467)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPatchParameteriOES(System.Int32 pname, Int32 value);
        [Slot(499)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPrimitiveBoundingBoxOES(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW);
        [Slot(501)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramBinaryOES(UInt32 program, System.Int32 binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length);
        [Slot(587)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIivOES(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* param);
        [Slot(589)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIuivOES(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* param);
        [Slot(593)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorArrayvOES(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v);
        [Slot(595)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissorIndexedOES(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);
        [Slot(597)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorIndexedvOES(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(624)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferOES(System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(626)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferRangeOES(System.Int32 target, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(629)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage3DOES(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(635)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIivOES(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(637)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIuivOES(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(644)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3DMultisampleOES(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(652)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(663)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureViewOES(UInt32 texture, System.Int32 target, UInt32 origtexture, System.Int32 internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
        [Slot(727)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapBufferOES(System.Int32 target);
        [Slot(753)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportArrayvOES(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v);
        [Slot(755)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportIndexedfOES(UInt32 index, Single x, Single y, Single w, Single h);
        [Slot(757)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportIndexedfvOES(UInt32 index, [CountAttribute(Count = 4)] Single* v);
        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureMultisampleMultiviewOVR(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 samples, Int32 baseViewIndex, Int32 numViews);
        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureMultiviewOVR(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews);
        [Slot(4)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFuncQCOM(System.Int32 func, Single @ref);
        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableDriverControlQCOM(UInt32 driverControl);
        [Slot(175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableDriverControlQCOM(UInt32 driverControl);
        [Slot(185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndTilingQCOM(System.Int32 preserveMask);
        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtGetBufferPointervQCOM(System.Int32 target, [OutAttribute] IntPtr @params);
        [Slot(188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetBuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxBuffers")] UInt32* buffers, Int32 maxBuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numBuffers);
        [Slot(189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetFramebuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numFramebuffers);
        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetProgramBinarySourceQCOM(UInt32 program, System.Int32 shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] IntPtr source, [OutAttribute] Int32* length);
        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetProgramsQCOM([OutAttribute, CountAttribute(Parameter = "maxPrograms")] UInt32* programs, Int32 maxPrograms, [OutAttribute, CountAttribute(Count = 1)] Int32* numPrograms);
        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetRenderbuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] Int32* numRenderbuffers);
        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetShadersQCOM([OutAttribute, CountAttribute(Parameter = "maxShaders")] UInt32* shaders, Int32 maxShaders, [OutAttribute, CountAttribute(Count = 1)] Int32* numShaders);
        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetTexLevelParameterivQCOM(UInt32 texture, System.Int32 face, Int32 level, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtGetTexSubImageQCOM(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr texels);
        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetTexturesQCOM([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures);
        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glExtIsProgramBinaryQCOM(UInt32 program);
        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtTexObjectStateOverrideiQCOM(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferFetchBarrierQCOM();
        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFramebufferFoveationConfigQCOM(UInt32 framebuffer, UInt32 numLayers, UInt32 focalPointsPerLayer, UInt32 requestedFeatures, [OutAttribute, CountAttribute(Count = 1)] UInt32* providedFeatures);
        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferFoveationParametersQCOM(UInt32 framebuffer, UInt32 layer, UInt32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea);
        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] UInt32* driverControls);
        [Slot(257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr driverControlString);
        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStartTilingQCOM(UInt32 x, UInt32 y, UInt32 width, UInt32 height, System.Int32 preserveMask);
        [Slot(653)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureFoveationParametersQCOM(UInt32 texture, UInt32 layer, UInt32 focalPoint, Single focalX, Single focalY, Single gainX, Single gainY, Single foveaArea);
    }
}
